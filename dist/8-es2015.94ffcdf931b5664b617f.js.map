{"version":3,"sources":["webpack:///src/app/modules/authentication/components/user-actions/user-actions.component.html","webpack:///src/app/modules/authentication/components/user-actions/user-actions.component.ts","webpack:///src/app/modules/authentication/authentication.module.ts"],"names":["UserActionsComponent","activeRoute","authService","USER_ACTIONS","VERIFY_EMAIL","RESET_PASSWORD","RECOVER_EMAIL","passwordStrength","isPasswordVisible","loading","passwordChanged","homepage","environment","app_dynamic_link","mode$","this","queryParams","pipe","map","mode","oobCode$","oobCode","verifyEmail$","filter","take","mergeMap","combineLatest","token","actionCode","from","verifyEmailVerificationCode","catchError","of","tap","verifyResetPasswordActionCode$","verifyPasswordResetCode","password","toPromise","confirmResetPassword","AUTHENTICATION_ROUTES","path","component","AuthenticationModule","forChild"],"mappings":"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","file":"x","sourcesContent":["<div class=\"row h-100 align-items-center justify-content-center user-actions-container\">\n\t<div *ngIf=\"loading then loadingAnimation\"></div>\n\t<div *ngIf=\"(mode$ | async) === USER_ACTIONS.VERIFY_EMAIL; then verifyEmail;\" [ngClass]=\"{'d-none' : loading}\">\n\t</div>\n\t<div *ngIf=\"(mode$ | async) === USER_ACTIONS.RESET_PASSWORD; then resetPasswordForm;\"\n\t\t\t [ngClass]=\"{'d-none' : loading}\">\n\t</div>\n</div>\n\n<ng-template #verifyEmail>\n\t<div *ngIf=\"(verifyEmail$ | async); else verifyEmailError\" [ngClass]=\"{'d-none' : loading}\">\n\t\t<div class=\"email-verification-container text-center\">\n\t\t\t<mat-icon svgIcon=\"email-verified\"></mat-icon>\n\t\t\t<h3 class=\"montserrat-text\">\n\t\t\t\t{{'userActions.emailVerification.success.message' | translate}}\n\t\t\t</h3>\n\t\t\t<p>\n\t\t\t\t{{'userActions.emailVerification.success.info' | translate}}\n\t\t\t</p>\n\t\t\t<a [attr.href]=\"homepage\" class=\"craftnote-btn medium primary text-white\">\n\t\t\t\t{{'userActions.emailVerification.success.buttonTxt' | translate}}\n\t\t\t</a>\n\t\t</div>\n\t</div>\n</ng-template>\n\n<ng-template #resetPasswordForm>\n\t<div *ngIf=\"(verifyResetPasswordActionCode$ | async) as email; else resetPasswordError\"\n\t\t\t [ngClass]=\"{'d-none' : passwordChanged || loading}\">\n\t\t<div class=\"reset-password-container text-center montserrat-text-light\">\n\t\t\t<h3 class=\"montserrat-text\">\n\t\t\t\t{{'userActions.resetPassword.form.title' | translate}}\n\t\t\t</h3>\n\t\t\t<p>\n\t\t\t\t{{email}}\n\t\t\t</p>\n\t\t\t<div class=\"form-group\">\n\t\t\t\t<mat-form-field class=\"w-100\">\n\t\t\t\t\t<input\n\t\t\t\t\t\t#passwordField=\"ngModel\"\n\t\t\t\t\t\t#pw=\"ngModel\"\n\t\t\t\t\t\t[(ngModel)]=\"password\"\n\t\t\t\t\t\t[class.ngInvalid]=\"passwordField.errors\"\n\t\t\t\t\t\t[type]=\"isPasswordVisible ? 'password' : 'text'\"\n\t\t\t\t\t\tmatInput\n\t\t\t\t\t\tminlength=\"8\"\n\t\t\t\t\t\tname=\"password\"\n\t\t\t\t\t\tplaceholder=\"{{ 'register.password' | translate }}\"\n\t\t\t\t\t\trequired\n\t\t\t\t\t/>\n\t\t\t\t\t<mat-icon matPrefix svgIcon=\"custom-lock\"></mat-icon>\n\t\t\t\t\t<mat-icon (click)=\"isPasswordVisible = !isPasswordVisible\"\n\t\t\t\t\t\t\t\t\t\tappEventStopPropagation class=\"pointer\"\n\t\t\t\t\t\t\t\t\t\tmatSuffix>{{isPasswordVisible ? \"visibility\" : \"visibility_off\"}}\n\t\t\t\t\t</mat-icon>\n\t\t\t\t\t<mat-error *ngIf=\"passwordField?.errors?.required\">\n\t\t\t\t\t\t{{ 'error.required' | translate }}\n\t\t\t\t\t</mat-error>\n\t\t\t\t\t<mat-error *ngIf=\"passwordField?.errors?.minlength\">\n\t\t\t\t\t\t{{ 'error.minlength' | translate:{ requiredLength: passwordField?.errors?.minlength?.requiredLength } }}\n\t\t\t\t\t</mat-error>\n\t\t\t\t</mat-form-field>\n\n\t\t\t\t<div *ngIf=\"getPasswordStrength() !== passwordStrength.INSUFFICIENT\" class=\"mt-2 text-right\">\n\t\t\t\t\t<div class=\"password-meter text-right align-items-center\">\n\t\t\t\t\t\t<div [class.active]=\"getPasswordStrength() === passwordStrength.STRONG\" class=\"chip\"></div>\n\t\t\t\t\t\t<div [class.active]=\"getPasswordStrength() === passwordStrength.MEDIUM\" class=\"chip\"></div>\n\t\t\t\t\t\t<div [class.active]=\"getPasswordStrength() === passwordStrength.LOW\" class=\"chip\"></div>\n\t\t\t\t\t\t<div class=\"text\">{{ 'register.password-meter.' + getPasswordStrength() | translate }}</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"form-group mt-3\">\n\t\t\t\t\t<span>{{'register.passwordHint' | translate}}</span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<button (click)=\"verifyPassword(password)\" [disabled]=\"passwordField.invalid\"\n\t\t\t\t\t\t\tclass=\"craftnote-btn large primary text-white\">\n\t\t\t\t{{'userActions.resetPassword.form.buttonTxt' | translate}}\n\t\t\t</button>\n\t\t</div>\n\t</div>\n\n\t<div *ngIf=\"passwordChanged then passwordChangedSuccessfully\"></div>\n\n</ng-template>\n\n<ng-template #verifyEmailError>\n\t<div [ngClass]=\"{'d-none' : loading}\" class=\"verification-error-container\">\n\t\t<mat-icon>error</mat-icon>\n\t\t<h3 class=\"montserrat-text\">\n\t\t\t{{'userActions.emailVerification.error.message' | translate}}\n\t\t</h3>\n\t\t<p>\n\t\t\t{{'userActions.emailVerification.error.info' | translate}}\n\t\t</p>\n\t\t<a [attr.href]=\"homepage\" class=\"craftnote-btn medium primary text-white\">\n\t\t\t{{'userActions.emailVerification.error.buttonTxt' | translate}}\n\t\t</a>\n\t</div>\n</ng-template>\n\n<ng-template #resetPasswordError>\n\t<div [ngClass]=\"{'d-none' : loading}\" class=\"resetPassword-error-container\">\n\t\t<mat-icon>error</mat-icon>\n\t\t<h3 class=\"montserrat-text\">\n\t\t\t{{'userActions.resetPassword.error.message' | translate}}\n\t\t</h3>\n\t\t<p>\n\t\t\t{{'userActions.resetPassword.error.info' | translate}}\n\t\t</p>\n\t\t<a class=\"craftnote-btn medium primary text-white\" routerLink=\"/password-forgotten\">\n\t\t\t{{'userActions.resetPassword.error.buttonTxt' | translate}}\n\t\t</a>\n\t</div>\n</ng-template>\n\n<ng-template #passwordChangedSuccessfully>\n\t<div class=\"email-verification-container text-center\">\n\t\t<mat-icon svgIcon=\"email-verified\"></mat-icon>\n\t\t<h3 class=\"montserrat-text\">\n\t\t\t{{'userActions.resetPassword.success.message' | translate}}\n\t\t</h3>\n\t\t<p>\n\t\t\t{{'userActions.resetPassword.success.info' | translate}}\n\t\t</p>\n\t\t<a [attr.href]=\"homepage\" class=\"craftnote-btn medium primary text-white\">\n\t\t\t{{'userActions.resetPassword.success.buttonTxt' | translate}}\n\t\t</a>\n\t</div>\n</ng-template>\n\n<ng-template #loadingAnimation>\n\t<app-pulsing-craftnote-icon></app-pulsing-craftnote-icon>\n</ng-template>\n","import { Component } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { catchError, filter, map, mergeMap, take, tap } from 'rxjs/operators';\nimport { AuthService } from '../../../../shared/firebase/auth.service';\nimport { combineLatest, from, of } from 'rxjs';\nimport { environment } from '../../../../../environments/environment';\nimport { checkPasswordStrength, PasswordStrength } from '../helper/password-strength.function';\n\n@Component({\n\tselector: 'app-user-actions',\n\ttemplateUrl: './user-actions.component.html',\n\tstyleUrls: ['./user-actions.component.scss'],\n})\nexport class UserActionsComponent {\n\n\treadonly USER_ACTIONS = {\n\t\tVERIFY_EMAIL: 'verifyEmail',\n\t\tRESET_PASSWORD: 'resetPassword',\n\t\tRECOVER_EMAIL: 'recoverEmail',\n\t};\n\n\tpasswordStrength = PasswordStrength;\n\n\tpassword: string;\n\tisPasswordVisible = true;\n\tloading = true;\n\tpasswordChanged = false;\n\thomepage = environment.app_dynamic_link;\n\n\tmode$ = this.activeRoute.queryParams.pipe(map(queryParams => queryParams.mode || null));\n\toobCode$ = this.activeRoute.queryParams.pipe(map(queryParams => queryParams.oobCode || null));\n\tverifyEmail$ = this.mode$.pipe(\n\t\tfilter(mode => mode === this.USER_ACTIONS.VERIFY_EMAIL),\n\t\ttake(1),\n\t\tmergeMap(() => {\n\t\t\treturn combineLatest([\n\t\t\t\tthis.oobCode$,\n\t\t\t\tthis.activeRoute.queryParams.pipe(map(queryParams => queryParams.token || null)),\n\t\t\t]);\n\t\t}),\n\t\tmergeMap(([actionCode, token]) => {\n\t\t\treturn from(this.authService.verifyEmailVerificationCode(actionCode, token));\n\t\t}),\n\t\tcatchError(() => {\n\t\t\treturn of(false);\n\t\t}),\n\t\ttap(() => {\n\t\t\tthis.loading = false;\n\t\t}),\n\t);\n\n\tverifyResetPasswordActionCode$ = this.mode$.pipe(\n\t\tfilter(mode => mode === this.USER_ACTIONS.RESET_PASSWORD),\n\t\ttake(1),\n\t\tmergeMap(() => this.oobCode$),\n\t\tmergeMap((actionCode) => {\n\t\t\treturn from(this.authService.verifyPasswordResetCode(actionCode));\n\t\t}),\n\t\tcatchError(() => {\n\t\t\treturn of(false);\n\t\t}),\n\t\ttap(() => {\n\t\t\tthis.loading = false;\n\t\t}),\n\t);\n\n\tconstructor(\n\t\tprivate readonly activeRoute: ActivatedRoute,\n\t\tprivate readonly authService: AuthService,\n\t) {\n\t}\n\n\tasync verifyPassword(password: string): Promise<void> {\n\t\tconst actionCode = await this.oobCode$.pipe(take(1)).toPromise();\n\t\tawait this.authService.confirmResetPassword(actionCode, password);\n\t\tthis.passwordChanged = true;\n\t}\n\n\tgetPasswordStrength(): PasswordStrength {\n\t\treturn checkPasswordStrength(this.password);\n\t}\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Route, RouterModule } from '@angular/router';\nimport { UserActionsComponent } from './components/user-actions/user-actions.component';\nimport { SharedModule } from '../../shared/shared.module';\nimport { SharedIconsModule } from '../shared/shared-icons/shared-icons.module';\n\nconst AUTHENTICATION_ROUTES: Route[] = [\n\t{\n\t\tpath: '',\n\t\tcomponent: UserActionsComponent,\n\t},\n];\n\n@NgModule({\n\tdeclarations: [UserActionsComponent],\n\timports: [\n\t\tCommonModule,\n\t\tSharedModule,\n\t\tRouterModule.forChild(AUTHENTICATION_ROUTES),\n\t\tSharedIconsModule,\n\t],\n})\nexport class AuthenticationModule {\n}\n"]}