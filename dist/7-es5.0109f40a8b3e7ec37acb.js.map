{"version":3,"sources":["webpack:///node_modules/@firebase/performance/dist/index.cjs.js","webpack:///node_modules/firebase/performance/dist/index.esm.js"],"names":["Object","defineProperty","exports","value","firebase","_a","apiInstance","windowInstance","e","tslib","util","logger$1","component","firebase__default","ERROR_DESCRIPTION_MAP","ERROR_FACTORY","ErrorFactory","consoleLogger","Logger","logLevel","LogLevel","INFO","settingsServiceInstance","Api","window","this","create","performance","PerformanceObserver","windowLocation","location","navigator","document","cookieEnabled","localStorage","perfMetrics","onFirstInputDelay","prototype","getUrl","href","split","mark","name","measure","measureName","mark1","mark2","getEntriesByType","type","getEntriesByName","getTimeOrigin","timeOrigin","timing","navigationStart","requiredApisAvailable","fetch","Promise","isIndexedDBAvailable","info","setupObserver","entryType","callback","list","_i","getEntries","length","observe","entryTypes","getInstance","mergeStrings","part1","part2","sizeDiff","resultArray","i","push","charAt","join","iid","SettingsService","instrumentationEnabled","dataCollectionEnabled","loggingEnabled","tracesSamplingRate","networkRequestsSamplingRate","logEndPointUrl","flTransportEndpointUrl","transportKey","logSource","logTraceAfterSampling","logNetworkAfterSampling","configTimeToLive","getAppId","appId","firebaseAppInstance","options","getProjectId","projectId","getApiKey","apiKey","getFlTransportFullUrl","concat","getIid","VisibilityState","RESERVED_ATTRIBUTE_PREFIXES","ATTRIBUTE_FORMAT_REGEX","RegExp","getVisibilityState","visibilityState","VISIBLE","HIDDEN","UNKNOWN","getEffectiveConnectionType","navigatorConnection","connection","effectiveType","processConfig","config","entries","fpr_enabled","String","fpr_log_source","Number","fpr_log_endpoint_url","fpr_log_transport_key","fpr_vc_network_request_sampling_rate","fpr_vc_trace_sampling_rate","shouldLogAfterSampling","samplingRate","Math","random","initializationPromise","initializationStatus","getInitializationPromise","resolve","readyState","addEventListener","handler_1","removeEventListener","then","iidPromise","installationsService","getId","iidVal","expiryString","getItem","Date","now","configStringified","JSON","parse","authTokenPromise","getToken","authTokenVal","authToken","configEndPoint","request","Request","method","headers","Authorization","FIS_AUTH_PREFIX","body","stringify","app_instance_id","app_instance_id_token","app_id","app_version","sdk_version","response","ok","json","setItem","changeInitializationStatus","logger","remainingTries","queue","isTransportSetup","addToQueue","evt","eventTime","message","__spreadArrays","sendLog","resource","resourceType","serializer","args","arguments","apply","logTrace","trace","settingsService","isAuto","sendTraceLog","setTimeout","networkRequestMetric","url","networkRequest","http_method","httpMethod","http_response_code","response_payload_bytes","responsePayloadBytes","client_start_time_us","startTimeUs","time_to_response_initiated_us","timeToResponseInitiatedUs","time_to_response_completed_us","timeToResponseCompletedUs","perfMetric","application_info","getApplicationInfo","network_request_metric","traceMetric","is_auto","duration_us","durationUs","keys","counters","customAttributes","getAttributes","custom_attributes","trace_metric","google_app_id","web_app_info","page_url","service_worker_status","serviceWorker","controller","visibility_state","effective_connection_type","application_process_state","oobMetrics","Trace","traceMeasureName","state","api","randomId","floor","traceStartMark","TRACE_START_MARK_PREFIX","traceStopMark","TRACE_STOP_MARK_PREFIX","traceMeasure","TRACE_MEASURE_PREFIX","calculateTraceMetrics","start","traceName","stop","record","startTime","duration","attributes","__assign","metrics","metric","isNaN","incrementMetric","counter","numAsInteger","putMetric","startsWith","indexOf","customMetricName","providedValue","valueAsInteger","getMetric","putAttribute","attr","isValidName","some","prefix","match","isValidValue","attributeName","attributeValue","getAttribute","removeAttribute","setStartTime","setDuration","perfMeasureEntries","perfMeasureEntry","createOobTrace","navigationTimings","paintTimings","firstInputDelay","route","timeOriginUs","domInteractive","domContentLoadedEventEnd","loadEventEnd","firstPaint","find","paintObject","firstContentfulPaint","createUserTimingTrace","createNetworkRequestEntry","entry","performanceEntry","responseStart","responseEnd","networkRequestUrl","logEndpointUrl","flEndpointUrl","transferSize","setupOobResources","timeoutId_1","fid","clearTimeout","resources_1","measures_1","substring","PerformanceController","app","validateIndexedDBOpenable","isAvailable","processQueue","timeOffset","staged","log_event","map","source_extension_json_proto3","event_time_ms","data","flTransportFullUrl","res","transportWait","nextRequestWaitMillis","requestOffset","max","logResponseDetails","Array","isArray","responseAction","request_time_ms","client_info","client_type","js_client_info","log_source","error","get","set","val","enumerable","configurable","registerPerformance","instance","INTERNAL","registerComponent","Component","container","installations","getProvider","getImmediate","registerVersion"],"mappings":"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","file":"x","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar firebase = require('@firebase/app');\nrequire('@firebase/installations');\nvar tslib = require('tslib');\nvar util = require('@firebase/util');\nvar logger$1 = require('@firebase/logger');\nvar component = require('@firebase/component');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar firebase__default = /*#__PURE__*/_interopDefaultLegacy(firebase);\n\nvar name = \"@firebase/performance\";\nvar version = \"0.4.1\";\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar SDK_VERSION = version;\r\n/** The prefix for start User Timing marks used for creating Traces. */\r\nvar TRACE_START_MARK_PREFIX = 'FB-PERF-TRACE-START';\r\n/** The prefix for stop User Timing marks used for creating Traces. */\r\nvar TRACE_STOP_MARK_PREFIX = 'FB-PERF-TRACE-STOP';\r\n/** The prefix for User Timing measure used for creating Traces. */\r\nvar TRACE_MEASURE_PREFIX = 'FB-PERF-TRACE-MEASURE';\r\n/** The prefix for out of the box page load Trace name. */\r\nvar OOB_TRACE_PAGE_LOAD_PREFIX = '_wt_';\r\nvar FIRST_PAINT_COUNTER_NAME = '_fp';\r\nvar FIRST_CONTENTFUL_PAINT_COUNTER_NAME = '_fcp';\r\nvar FIRST_INPUT_DELAY_COUNTER_NAME = '_fid';\r\nvar CONFIG_LOCAL_STORAGE_KEY = '@firebase/performance/config';\r\nvar CONFIG_EXPIRY_LOCAL_STORAGE_KEY = '@firebase/performance/configexpire';\r\nvar SERVICE = 'performance';\r\nvar SERVICE_NAME = 'Performance';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar _a;\r\nvar ERROR_DESCRIPTION_MAP = (_a = {},\r\n    _a[\"trace started\" /* TRACE_STARTED_BEFORE */] = 'Trace {$traceName} was started before.',\r\n    _a[\"trace stopped\" /* TRACE_STOPPED_BEFORE */] = 'Trace {$traceName} is not running.',\r\n    _a[\"no window\" /* NO_WINDOW */] = 'Window is not available.',\r\n    _a[\"no app id\" /* NO_APP_ID */] = 'App id is not available.',\r\n    _a[\"no project id\" /* NO_PROJECT_ID */] = 'Project id is not available.',\r\n    _a[\"no api key\" /* NO_API_KEY */] = 'Api key is not available.',\r\n    _a[\"invalid cc log\" /* INVALID_CC_LOG */] = 'Attempted to queue invalid cc event',\r\n    _a[\"FB not default\" /* FB_NOT_DEFAULT */] = 'Performance can only start when Firebase app instance is the default one.',\r\n    _a[\"RC response not ok\" /* RC_NOT_OK */] = 'RC response is not ok',\r\n    _a[\"invalid attribute name\" /* INVALID_ATTRIBUTE_NAME */] = 'Attribute name {$attributeName} is invalid.',\r\n    _a[\"invalid attribute value\" /* INVALID_ATTRIBUTE_VALUE */] = 'Attribute value {$attributeValue} is invalid.',\r\n    _a[\"invalid custom metric name\" /* INVALID_CUSTOM_METRIC_NAME */] = 'Custom metric name {$customMetricName} is invalid',\r\n    _a[\"invalid String merger input\" /* INVALID_STRING_MERGER_PARAMETER */] = 'Input for String merger is invalid, contact support team to resolve.',\r\n    _a);\r\nvar ERROR_FACTORY = new util.ErrorFactory(SERVICE, SERVICE_NAME, ERROR_DESCRIPTION_MAP);\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar consoleLogger = new logger$1.Logger(SERVICE_NAME);\r\nconsoleLogger.logLevel = logger$1.LogLevel.INFO;\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar apiInstance;\r\nvar windowInstance;\r\n/**\r\n * This class holds a reference to various browser related objects injected by\r\n * set methods.\r\n */\r\nvar Api = /** @class */ (function () {\r\n    function Api(window) {\r\n        this.window = window;\r\n        if (!window) {\r\n            throw ERROR_FACTORY.create(\"no window\" /* NO_WINDOW */);\r\n        }\r\n        this.performance = window.performance;\r\n        this.PerformanceObserver = window.PerformanceObserver;\r\n        this.windowLocation = window.location;\r\n        this.navigator = window.navigator;\r\n        this.document = window.document;\r\n        if (this.navigator && this.navigator.cookieEnabled) {\r\n            // If user blocks cookies on the browser, accessing localStorage will\r\n            // throw an exception.\r\n            this.localStorage = window.localStorage;\r\n        }\r\n        if (window.perfMetrics && window.perfMetrics.onFirstInputDelay) {\r\n            this.onFirstInputDelay = window.perfMetrics.onFirstInputDelay;\r\n        }\r\n    }\r\n    Api.prototype.getUrl = function () {\r\n        // Do not capture the string query part of url.\r\n        return this.windowLocation.href.split('?')[0];\r\n    };\r\n    Api.prototype.mark = function (name) {\r\n        if (!this.performance || !this.performance.mark) {\r\n            return;\r\n        }\r\n        this.performance.mark(name);\r\n    };\r\n    Api.prototype.measure = function (measureName, mark1, mark2) {\r\n        if (!this.performance || !this.performance.measure) {\r\n            return;\r\n        }\r\n        this.performance.measure(measureName, mark1, mark2);\r\n    };\r\n    Api.prototype.getEntriesByType = function (type) {\r\n        if (!this.performance || !this.performance.getEntriesByType) {\r\n            return [];\r\n        }\r\n        return this.performance.getEntriesByType(type);\r\n    };\r\n    Api.prototype.getEntriesByName = function (name) {\r\n        if (!this.performance || !this.performance.getEntriesByName) {\r\n            return [];\r\n        }\r\n        return this.performance.getEntriesByName(name);\r\n    };\r\n    Api.prototype.getTimeOrigin = function () {\r\n        // Polyfill the time origin with performance.timing.navigationStart.\r\n        return (this.performance &&\r\n            (this.performance.timeOrigin || this.performance.timing.navigationStart));\r\n    };\r\n    Api.prototype.requiredApisAvailable = function () {\r\n        if (!fetch ||\r\n            !Promise ||\r\n            !this.navigator ||\r\n            !this.navigator.cookieEnabled) {\r\n            consoleLogger.info('Firebase Performance cannot start if browser does not support fetch and Promise or cookie is disabled.');\r\n            return false;\r\n        }\r\n        if (!util.isIndexedDBAvailable()) {\r\n            consoleLogger.info('IndexedDB is not supported by current browswer');\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    Api.prototype.setupObserver = function (entryType, callback) {\r\n        if (!this.PerformanceObserver) {\r\n            return;\r\n        }\r\n        var observer = new this.PerformanceObserver(function (list) {\r\n            for (var _i = 0, _a = list.getEntries(); _i < _a.length; _i++) {\r\n                var entry = _a[_i];\r\n                // `entry` is a PerformanceEntry instance.\r\n                callback(entry);\r\n            }\r\n        });\r\n        // Start observing the entry types you care about.\r\n        observer.observe({ entryTypes: [entryType] });\r\n    };\r\n    Api.getInstance = function () {\r\n        if (apiInstance === undefined) {\r\n            apiInstance = new Api(windowInstance);\r\n        }\r\n        return apiInstance;\r\n    };\r\n    return Api;\r\n}());\r\nfunction setupApi(window) {\r\n    windowInstance = window;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction mergeStrings(part1, part2) {\r\n    var sizeDiff = part1.length - part2.length;\r\n    if (sizeDiff < 0 || sizeDiff > 1) {\r\n        throw ERROR_FACTORY.create(\"invalid String merger input\" /* INVALID_STRING_MERGER_PARAMETER */);\r\n    }\r\n    var resultArray = [];\r\n    for (var i = 0; i < part1.length; i++) {\r\n        resultArray.push(part1.charAt(i));\r\n        if (part2.length > i) {\r\n            resultArray.push(part2.charAt(i));\r\n        }\r\n    }\r\n    return resultArray.join('');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar settingsServiceInstance;\r\nvar SettingsService = /** @class */ (function () {\r\n    function SettingsService() {\r\n        // The variable which controls logging of automatic traces and HTTP/S network monitoring.\r\n        this.instrumentationEnabled = true;\r\n        // The variable which controls logging of custom traces.\r\n        this.dataCollectionEnabled = true;\r\n        // Configuration flags set through remote config.\r\n        this.loggingEnabled = false;\r\n        // Sampling rate between 0 and 1.\r\n        this.tracesSamplingRate = 1;\r\n        this.networkRequestsSamplingRate = 1;\r\n        // Address of logging service.\r\n        this.logEndPointUrl = 'https://firebaselogging.googleapis.com/v0cc/log?format=json_proto';\r\n        // Performance event transport endpoint URL which should be compatible with proto3.\r\n        // New Address for transport service, not configurable via Remote Config.\r\n        this.flTransportEndpointUrl = mergeStrings('hts/frbslgigp.ogepscmv/ieo/eaylg', 'tp:/ieaeogn-agolai.o/1frlglgc/o');\r\n        this.transportKey = mergeStrings('AzSC8r6ReiGqFMyfvgow', 'Iayx0u-XT3vksVM-pIV');\r\n        // Source type for performance event logs.\r\n        this.logSource = 462;\r\n        // Flags which control per session logging of traces and network requests.\r\n        this.logTraceAfterSampling = false;\r\n        this.logNetworkAfterSampling = false;\r\n        // TTL of config retrieved from remote config in hours.\r\n        this.configTimeToLive = 12;\r\n    }\r\n    SettingsService.prototype.getAppId = function () {\r\n        var appId = this.firebaseAppInstance &&\r\n            this.firebaseAppInstance.options &&\r\n            this.firebaseAppInstance.options.appId;\r\n        if (!appId) {\r\n            throw ERROR_FACTORY.create(\"no app id\" /* NO_APP_ID */);\r\n        }\r\n        return appId;\r\n    };\r\n    SettingsService.prototype.getProjectId = function () {\r\n        var projectId = this.firebaseAppInstance &&\r\n            this.firebaseAppInstance.options &&\r\n            this.firebaseAppInstance.options.projectId;\r\n        if (!projectId) {\r\n            throw ERROR_FACTORY.create(\"no project id\" /* NO_PROJECT_ID */);\r\n        }\r\n        return projectId;\r\n    };\r\n    SettingsService.prototype.getApiKey = function () {\r\n        var apiKey = this.firebaseAppInstance &&\r\n            this.firebaseAppInstance.options &&\r\n            this.firebaseAppInstance.options.apiKey;\r\n        if (!apiKey) {\r\n            throw ERROR_FACTORY.create(\"no api key\" /* NO_API_KEY */);\r\n        }\r\n        return apiKey;\r\n    };\r\n    SettingsService.prototype.getFlTransportFullUrl = function () {\r\n        return this.flTransportEndpointUrl.concat('?key=', this.transportKey);\r\n    };\r\n    SettingsService.getInstance = function () {\r\n        if (settingsServiceInstance === undefined) {\r\n            settingsServiceInstance = new SettingsService();\r\n        }\r\n        return settingsServiceInstance;\r\n    };\r\n    return SettingsService;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar iid;\r\nfunction getIidPromise() {\r\n    var iidPromise = SettingsService.getInstance().installationsService.getId();\r\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n    iidPromise.then(function (iidVal) {\r\n        iid = iidVal;\r\n    });\r\n    return iidPromise;\r\n}\r\n// This method should be used after the iid is retrieved by getIidPromise method.\r\nfunction getIid() {\r\n    return iid;\r\n}\r\nfunction getAuthTokenPromise() {\r\n    var authTokenPromise = SettingsService.getInstance().installationsService.getToken();\r\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n    authTokenPromise.then(function (authTokenVal) {\r\n    });\r\n    return authTokenPromise;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar VisibilityState;\r\n(function (VisibilityState) {\r\n    VisibilityState[VisibilityState[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\r\n    VisibilityState[VisibilityState[\"VISIBLE\"] = 1] = \"VISIBLE\";\r\n    VisibilityState[VisibilityState[\"HIDDEN\"] = 2] = \"HIDDEN\";\r\n})(VisibilityState || (VisibilityState = {}));\r\nvar RESERVED_ATTRIBUTE_PREFIXES = ['firebase_', 'google_', 'ga_'];\r\nvar ATTRIBUTE_FORMAT_REGEX = new RegExp('^[a-zA-Z]\\\\w*$');\r\nvar MAX_ATTRIBUTE_NAME_LENGTH = 40;\r\nvar MAX_ATTRIBUTE_VALUE_LENGTH = 100;\r\nfunction getServiceWorkerStatus() {\r\n    var navigator = Api.getInstance().navigator;\r\n    if ('serviceWorker' in navigator) {\r\n        if (navigator.serviceWorker.controller) {\r\n            return 2 /* CONTROLLED */;\r\n        }\r\n        else {\r\n            return 3 /* UNCONTROLLED */;\r\n        }\r\n    }\r\n    else {\r\n        return 1 /* UNSUPPORTED */;\r\n    }\r\n}\r\nfunction getVisibilityState() {\r\n    var document = Api.getInstance().document;\r\n    var visibilityState = document.visibilityState;\r\n    switch (visibilityState) {\r\n        case 'visible':\r\n            return VisibilityState.VISIBLE;\r\n        case 'hidden':\r\n            return VisibilityState.HIDDEN;\r\n        default:\r\n            return VisibilityState.UNKNOWN;\r\n    }\r\n}\r\nfunction getEffectiveConnectionType() {\r\n    var navigator = Api.getInstance().navigator;\r\n    var navigatorConnection = navigator.connection;\r\n    var effectiveType = navigatorConnection && navigatorConnection.effectiveType;\r\n    switch (effectiveType) {\r\n        case 'slow-2g':\r\n            return 1 /* CONNECTION_SLOW_2G */;\r\n        case '2g':\r\n            return 2 /* CONNECTION_2G */;\r\n        case '3g':\r\n            return 3 /* CONNECTION_3G */;\r\n        case '4g':\r\n            return 4 /* CONNECTION_4G */;\r\n        default:\r\n            return 0 /* UNKNOWN */;\r\n    }\r\n}\r\nfunction isValidCustomAttributeName(name) {\r\n    if (name.length === 0 || name.length > MAX_ATTRIBUTE_NAME_LENGTH) {\r\n        return false;\r\n    }\r\n    var matchesReservedPrefix = RESERVED_ATTRIBUTE_PREFIXES.some(function (prefix) {\r\n        return name.startsWith(prefix);\r\n    });\r\n    return !matchesReservedPrefix && !!name.match(ATTRIBUTE_FORMAT_REGEX);\r\n}\r\nfunction isValidCustomAttributeValue(value) {\r\n    return value.length !== 0 && value.length <= MAX_ATTRIBUTE_VALUE_LENGTH;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar REMOTE_CONFIG_SDK_VERSION = '0.0.1';\r\n// These values will be used if the remote config object is successfully\r\n// retrieved, but the template does not have these fields.\r\nvar DEFAULT_CONFIGS = {\r\n    loggingEnabled: true\r\n};\r\nvar FIS_AUTH_PREFIX = 'FIREBASE_INSTALLATIONS_AUTH';\r\nfunction getConfig(iid) {\r\n    var config = getStoredConfig();\r\n    if (config) {\r\n        processConfig(config);\r\n        return Promise.resolve();\r\n    }\r\n    return getRemoteConfig(iid)\r\n        .then(processConfig)\r\n        .then(function (config) { return storeConfig(config); }, \r\n    /** Do nothing for error, use defaults set in settings service. */\r\n    function () { });\r\n}\r\nfunction getStoredConfig() {\r\n    var localStorage = Api.getInstance().localStorage;\r\n    if (!localStorage) {\r\n        return;\r\n    }\r\n    var expiryString = localStorage.getItem(CONFIG_EXPIRY_LOCAL_STORAGE_KEY);\r\n    if (!expiryString || !configValid(expiryString)) {\r\n        return;\r\n    }\r\n    var configStringified = localStorage.getItem(CONFIG_LOCAL_STORAGE_KEY);\r\n    if (!configStringified) {\r\n        return;\r\n    }\r\n    try {\r\n        var configResponse = JSON.parse(configStringified);\r\n        return configResponse;\r\n    }\r\n    catch (_a) {\r\n        return;\r\n    }\r\n}\r\nfunction storeConfig(config) {\r\n    var localStorage = Api.getInstance().localStorage;\r\n    if (!config || !localStorage) {\r\n        return;\r\n    }\r\n    localStorage.setItem(CONFIG_LOCAL_STORAGE_KEY, JSON.stringify(config));\r\n    localStorage.setItem(CONFIG_EXPIRY_LOCAL_STORAGE_KEY, String(Date.now() +\r\n        SettingsService.getInstance().configTimeToLive * 60 * 60 * 1000));\r\n}\r\nvar COULD_NOT_GET_CONFIG_MSG = 'Could not fetch config, will use default configs';\r\nfunction getRemoteConfig(iid) {\r\n    // Perf needs auth token only to retrieve remote config.\r\n    return getAuthTokenPromise()\r\n        .then(function (authToken) {\r\n        var projectId = SettingsService.getInstance().getProjectId();\r\n        var configEndPoint = \"https://firebaseremoteconfig.googleapis.com/v1/projects/\" + projectId + \"/namespaces/fireperf:fetch?key=\" + SettingsService.getInstance().getApiKey();\r\n        var request = new Request(configEndPoint, {\r\n            method: 'POST',\r\n            headers: { Authorization: FIS_AUTH_PREFIX + \" \" + authToken },\r\n            /* eslint-disable camelcase */\r\n            body: JSON.stringify({\r\n                app_instance_id: iid,\r\n                app_instance_id_token: authToken,\r\n                app_id: SettingsService.getInstance().getAppId(),\r\n                app_version: SDK_VERSION,\r\n                sdk_version: REMOTE_CONFIG_SDK_VERSION\r\n            })\r\n            /* eslint-enable camelcase */\r\n        });\r\n        return fetch(request).then(function (response) {\r\n            if (response.ok) {\r\n                return response.json();\r\n            }\r\n            // In case response is not ok. This will be caught by catch.\r\n            throw ERROR_FACTORY.create(\"RC response not ok\" /* RC_NOT_OK */);\r\n        });\r\n    })\r\n        .catch(function () {\r\n        consoleLogger.info(COULD_NOT_GET_CONFIG_MSG);\r\n        return undefined;\r\n    });\r\n}\r\n/**\r\n * Processes config coming either from calling RC or from local storage.\r\n * This method only runs if call is successful or config in storage\r\n * is valid.\r\n */\r\nfunction processConfig(config) {\r\n    if (!config) {\r\n        return config;\r\n    }\r\n    var settingsServiceInstance = SettingsService.getInstance();\r\n    var entries = config.entries || {};\r\n    if (entries.fpr_enabled !== undefined) {\r\n        // TODO: Change the assignment of loggingEnabled once the received type is\r\n        // known.\r\n        settingsServiceInstance.loggingEnabled =\r\n            String(entries.fpr_enabled) === 'true';\r\n    }\r\n    else {\r\n        // Config retrieved successfully, but there is no fpr_enabled in template.\r\n        // Use secondary configs value.\r\n        settingsServiceInstance.loggingEnabled = DEFAULT_CONFIGS.loggingEnabled;\r\n    }\r\n    if (entries.fpr_log_source) {\r\n        settingsServiceInstance.logSource = Number(entries.fpr_log_source);\r\n    }\r\n    if (entries.fpr_log_endpoint_url) {\r\n        settingsServiceInstance.logEndPointUrl = entries.fpr_log_endpoint_url;\r\n    }\r\n    // Key from Remote Config has to be non-empty string, otherwsie use local value.\r\n    if (entries.fpr_log_transport_key) {\r\n        settingsServiceInstance.transportKey = entries.fpr_log_transport_key;\r\n    }\r\n    if (entries.fpr_vc_network_request_sampling_rate !== undefined) {\r\n        settingsServiceInstance.networkRequestsSamplingRate = Number(entries.fpr_vc_network_request_sampling_rate);\r\n    }\r\n    if (entries.fpr_vc_trace_sampling_rate !== undefined) {\r\n        settingsServiceInstance.tracesSamplingRate = Number(entries.fpr_vc_trace_sampling_rate);\r\n    }\r\n    // Set the per session trace and network logging flags.\r\n    settingsServiceInstance.logTraceAfterSampling = shouldLogAfterSampling(settingsServiceInstance.tracesSamplingRate);\r\n    settingsServiceInstance.logNetworkAfterSampling = shouldLogAfterSampling(settingsServiceInstance.networkRequestsSamplingRate);\r\n    return config;\r\n}\r\nfunction configValid(expiry) {\r\n    return Number(expiry) > Date.now();\r\n}\r\nfunction shouldLogAfterSampling(samplingRate) {\r\n    return Math.random() <= samplingRate;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar initializationStatus = 1 /* notInitialized */;\r\nvar initializationPromise;\r\nfunction getInitializationPromise() {\r\n    initializationStatus = 2 /* initializationPending */;\r\n    initializationPromise = initializationPromise || initializePerf();\r\n    return initializationPromise;\r\n}\r\nfunction isPerfInitialized() {\r\n    return initializationStatus === 3 /* initialized */;\r\n}\r\nfunction initializePerf() {\r\n    return getDocumentReadyComplete()\r\n        .then(function () { return getIidPromise(); })\r\n        .then(function (iid) { return getConfig(iid); })\r\n        .then(function () { return changeInitializationStatus(); }, function () { return changeInitializationStatus(); });\r\n}\r\n/**\r\n * Returns a promise which resolves whenever the document readystate is complete or\r\n * immediately if it is called after page load complete.\r\n */\r\nfunction getDocumentReadyComplete() {\r\n    var document = Api.getInstance().document;\r\n    return new Promise(function (resolve) {\r\n        if (document && document.readyState !== 'complete') {\r\n            var handler_1 = function () {\r\n                if (document.readyState === 'complete') {\r\n                    document.removeEventListener('readystatechange', handler_1);\r\n                    resolve();\r\n                }\r\n            };\r\n            document.addEventListener('readystatechange', handler_1);\r\n        }\r\n        else {\r\n            resolve();\r\n        }\r\n    });\r\n}\r\nfunction changeInitializationStatus() {\r\n    initializationStatus = 3 /* initialized */;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar DEFAULT_SEND_INTERVAL_MS = 10 * 1000;\r\nvar INITIAL_SEND_TIME_DELAY_MS = 5.5 * 1000;\r\n// If end point does not work, the call will be tried for these many times.\r\nvar DEFAULT_REMAINING_TRIES = 3;\r\nvar remainingTries = DEFAULT_REMAINING_TRIES;\r\n/* eslint-enable camelcase */\r\nvar queue = [];\r\nvar isTransportSetup = false;\r\nfunction setupTransportService() {\r\n    if (!isTransportSetup) {\r\n        processQueue(INITIAL_SEND_TIME_DELAY_MS);\r\n        isTransportSetup = true;\r\n    }\r\n}\r\nfunction processQueue(timeOffset) {\r\n    setTimeout(function () {\r\n        // If there is no remainingTries left, stop retrying.\r\n        if (remainingTries === 0) {\r\n            return;\r\n        }\r\n        // If there are no events to process, wait for DEFAULT_SEND_INTERVAL_MS and try again.\r\n        if (!queue.length) {\r\n            return processQueue(DEFAULT_SEND_INTERVAL_MS);\r\n        }\r\n        dispatchQueueEvents();\r\n    }, timeOffset);\r\n}\r\nfunction dispatchQueueEvents() {\r\n    // Capture a snapshot of the queue and empty the \"official queue\".\r\n    var staged = tslib.__spreadArrays(queue);\r\n    queue = [];\r\n    /* eslint-disable camelcase */\r\n    // We will pass the JSON serialized event to the backend.\r\n    var log_event = staged.map(function (evt) { return ({\r\n        source_extension_json_proto3: evt.message,\r\n        event_time_ms: String(evt.eventTime)\r\n    }); });\r\n    var data = {\r\n        request_time_ms: String(Date.now()),\r\n        client_info: {\r\n            client_type: 1,\r\n            js_client_info: {}\r\n        },\r\n        log_source: SettingsService.getInstance().logSource,\r\n        log_event: log_event\r\n    };\r\n    /* eslint-enable camelcase */\r\n    sendEventsToFl(data, staged).catch(function () {\r\n        // If the request fails for some reason, add the events that were attempted\r\n        // back to the primary queue to retry later.\r\n        queue = tslib.__spreadArrays(staged, queue);\r\n        remainingTries--;\r\n        consoleLogger.info(\"Tries left: \" + remainingTries + \".\");\r\n        processQueue(DEFAULT_SEND_INTERVAL_MS);\r\n    });\r\n}\r\nfunction sendEventsToFl(data, staged) {\r\n    return postToFlEndpoint(data)\r\n        .then(function (res) {\r\n        if (!res.ok) {\r\n            consoleLogger.info('Call to Firebase backend failed.');\r\n        }\r\n        return res.json();\r\n    })\r\n        .then(function (res) {\r\n        // Find the next call wait time from the response.\r\n        var transportWait = Number(res.nextRequestWaitMillis);\r\n        var requestOffset = DEFAULT_SEND_INTERVAL_MS;\r\n        if (!isNaN(transportWait)) {\r\n            requestOffset = Math.max(transportWait, requestOffset);\r\n        }\r\n        // Delete request if response include RESPONSE_ACTION_UNKNOWN or DELETE_REQUEST action.\r\n        // Otherwise, retry request using normal scheduling if response include RETRY_REQUEST_LATER.\r\n        var logResponseDetails = res.logResponseDetails;\r\n        if (Array.isArray(logResponseDetails) &&\r\n            logResponseDetails.length > 0 &&\r\n            logResponseDetails[0].responseAction === 'RETRY_REQUEST_LATER') {\r\n            queue = tslib.__spreadArrays(staged, queue);\r\n            consoleLogger.info(\"Retry transport request later.\");\r\n        }\r\n        remainingTries = DEFAULT_REMAINING_TRIES;\r\n        // Schedule the next process.\r\n        processQueue(requestOffset);\r\n    });\r\n}\r\nfunction postToFlEndpoint(data) {\r\n    var flTransportFullUrl = SettingsService.getInstance().getFlTransportFullUrl();\r\n    return fetch(flTransportFullUrl, {\r\n        method: 'POST',\r\n        body: JSON.stringify(data)\r\n    });\r\n}\r\nfunction addToQueue(evt) {\r\n    if (!evt.eventTime || !evt.message) {\r\n        throw ERROR_FACTORY.create(\"invalid cc log\" /* INVALID_CC_LOG */);\r\n    }\r\n    // Add the new event to the queue.\r\n    queue = tslib.__spreadArrays(queue, [evt]);\r\n}\r\n/** Log handler for cc service to send the performance logs to the server. */\r\nfunction transportHandler(\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nserializer) {\r\n    return function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        var message = serializer.apply(void 0, args);\r\n        addToQueue({\r\n            message: message,\r\n            eventTime: Date.now()\r\n        });\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/* eslint-enble camelcase */\r\nvar logger;\r\n// This method is not called before initialization.\r\nfunction sendLog(resource, resourceType) {\r\n    if (!logger) {\r\n        logger = transportHandler(serializer);\r\n    }\r\n    logger(resource, resourceType);\r\n}\r\nfunction logTrace(trace) {\r\n    var settingsService = SettingsService.getInstance();\r\n    // Do not log if trace is auto generated and instrumentation is disabled.\r\n    if (!settingsService.instrumentationEnabled && trace.isAuto) {\r\n        return;\r\n    }\r\n    // Do not log if trace is custom and data collection is disabled.\r\n    if (!settingsService.dataCollectionEnabled && !trace.isAuto) {\r\n        return;\r\n    }\r\n    // Do not log if required apis are not available.\r\n    if (!Api.getInstance().requiredApisAvailable()) {\r\n        return;\r\n    }\r\n    // Only log the page load auto traces if page is visible.\r\n    if (trace.isAuto && getVisibilityState() !== VisibilityState.VISIBLE) {\r\n        return;\r\n    }\r\n    if (!settingsService.loggingEnabled ||\r\n        !settingsService.logTraceAfterSampling) {\r\n        return;\r\n    }\r\n    if (isPerfInitialized()) {\r\n        sendTraceLog(trace);\r\n    }\r\n    else {\r\n        // Custom traces can be used before the initialization but logging\r\n        // should wait until after.\r\n        getInitializationPromise().then(function () { return sendTraceLog(trace); }, function () { return sendTraceLog(trace); });\r\n    }\r\n}\r\nfunction sendTraceLog(trace) {\r\n    if (getIid()) {\r\n        setTimeout(function () { return sendLog(trace, 1 /* Trace */); }, 0);\r\n    }\r\n}\r\nfunction logNetworkRequest(networkRequest) {\r\n    var settingsService = SettingsService.getInstance();\r\n    // Do not log network requests if instrumentation is disabled.\r\n    if (!settingsService.instrumentationEnabled) {\r\n        return;\r\n    }\r\n    // Do not log the js sdk's call to transport service domain to avoid unnecessary cycle.\r\n    // Need to blacklist both old and new endpoints to avoid migration gap.\r\n    var networkRequestUrl = networkRequest.url;\r\n    // Blacklist old log endpoint and new transport endpoint.\r\n    // Because Performance SDK doesn't instrument requests sent from SDK itself.\r\n    var logEndpointUrl = settingsService.logEndPointUrl.split('?')[0];\r\n    var flEndpointUrl = settingsService.flTransportEndpointUrl.split('?')[0];\r\n    if (networkRequestUrl === logEndpointUrl ||\r\n        networkRequestUrl === flEndpointUrl) {\r\n        return;\r\n    }\r\n    if (!settingsService.loggingEnabled ||\r\n        !settingsService.logNetworkAfterSampling) {\r\n        return;\r\n    }\r\n    setTimeout(function () { return sendLog(networkRequest, 0 /* NetworkRequest */); }, 0);\r\n}\r\nfunction serializer(resource, resourceType) {\r\n    if (resourceType === 0 /* NetworkRequest */) {\r\n        return serializeNetworkRequest(resource);\r\n    }\r\n    return serializeTrace(resource);\r\n}\r\nfunction serializeNetworkRequest(networkRequest) {\r\n    var networkRequestMetric = {\r\n        url: networkRequest.url,\r\n        http_method: networkRequest.httpMethod || 0,\r\n        http_response_code: 200,\r\n        response_payload_bytes: networkRequest.responsePayloadBytes,\r\n        client_start_time_us: networkRequest.startTimeUs,\r\n        time_to_response_initiated_us: networkRequest.timeToResponseInitiatedUs,\r\n        time_to_response_completed_us: networkRequest.timeToResponseCompletedUs\r\n    };\r\n    var perfMetric = {\r\n        application_info: getApplicationInfo(),\r\n        network_request_metric: networkRequestMetric\r\n    };\r\n    return JSON.stringify(perfMetric);\r\n}\r\nfunction serializeTrace(trace) {\r\n    var traceMetric = {\r\n        name: trace.name,\r\n        is_auto: trace.isAuto,\r\n        client_start_time_us: trace.startTimeUs,\r\n        duration_us: trace.durationUs\r\n    };\r\n    if (Object.keys(trace.counters).length !== 0) {\r\n        traceMetric.counters = trace.counters;\r\n    }\r\n    var customAttributes = trace.getAttributes();\r\n    if (Object.keys(customAttributes).length !== 0) {\r\n        traceMetric.custom_attributes = customAttributes;\r\n    }\r\n    var perfMetric = {\r\n        application_info: getApplicationInfo(),\r\n        trace_metric: traceMetric\r\n    };\r\n    return JSON.stringify(perfMetric);\r\n}\r\nfunction getApplicationInfo() {\r\n    return {\r\n        google_app_id: SettingsService.getInstance().getAppId(),\r\n        app_instance_id: getIid(),\r\n        web_app_info: {\r\n            sdk_version: SDK_VERSION,\r\n            page_url: Api.getInstance().getUrl(),\r\n            service_worker_status: getServiceWorkerStatus(),\r\n            visibility_state: getVisibilityState(),\r\n            effective_connection_type: getEffectiveConnectionType()\r\n        },\r\n        application_process_state: 0\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar MAX_METRIC_NAME_LENGTH = 100;\r\nvar RESERVED_AUTO_PREFIX = '_';\r\nvar oobMetrics = [\r\n    FIRST_PAINT_COUNTER_NAME,\r\n    FIRST_CONTENTFUL_PAINT_COUNTER_NAME,\r\n    FIRST_INPUT_DELAY_COUNTER_NAME\r\n];\r\n/**\r\n * Returns true if the metric is custom and does not start with reserved prefix, or if\r\n * the metric is one of out of the box page load trace metrics.\r\n */\r\nfunction isValidMetricName(name, traceName) {\r\n    if (name.length === 0 || name.length > MAX_METRIC_NAME_LENGTH) {\r\n        return false;\r\n    }\r\n    return ((traceName &&\r\n        traceName.startsWith(OOB_TRACE_PAGE_LOAD_PREFIX) &&\r\n        oobMetrics.indexOf(name) > -1) ||\r\n        !name.startsWith(RESERVED_AUTO_PREFIX));\r\n}\r\n/**\r\n * Converts the provided value to an integer value to be used in case of a metric.\r\n * @param providedValue Provided number value of the metric that needs to be converted to an integer.\r\n *\r\n * @returns Converted integer number to be set for the metric.\r\n */\r\nfunction convertMetricValueToInteger(providedValue) {\r\n    var valueAsInteger = Math.floor(providedValue);\r\n    if (valueAsInteger < providedValue) {\r\n        consoleLogger.info(\"Metric value should be an Integer, setting the value as : \" + valueAsInteger + \".\");\r\n    }\r\n    return valueAsInteger;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar Trace = /** @class */ (function () {\r\n    /**\r\n     * @param name The name of the trace.\r\n     * @param isAuto If the trace is auto-instrumented.\r\n     * @param traceMeasureName The name of the measure marker in user timing specification. This field\r\n     * is only set when the trace is built for logging when the user directly uses the user timing\r\n     * api (performance.mark and performance.measure).\r\n     */\r\n    function Trace(name, isAuto, traceMeasureName) {\r\n        if (isAuto === void 0) { isAuto = false; }\r\n        this.name = name;\r\n        this.isAuto = isAuto;\r\n        this.state = 1 /* UNINITIALIZED */;\r\n        this.customAttributes = {};\r\n        this.counters = {};\r\n        this.api = Api.getInstance();\r\n        this.randomId = Math.floor(Math.random() * 1000000);\r\n        if (!this.isAuto) {\r\n            this.traceStartMark = TRACE_START_MARK_PREFIX + \"-\" + this.randomId + \"-\" + this.name;\r\n            this.traceStopMark = TRACE_STOP_MARK_PREFIX + \"-\" + this.randomId + \"-\" + this.name;\r\n            this.traceMeasure =\r\n                traceMeasureName ||\r\n                    TRACE_MEASURE_PREFIX + \"-\" + this.randomId + \"-\" + this.name;\r\n            if (traceMeasureName) {\r\n                // For the case of direct user timing traces, no start stop will happen. The measure object\r\n                // is already available.\r\n                this.calculateTraceMetrics();\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Starts a trace. The measurement of the duration starts at this point.\r\n     */\r\n    Trace.prototype.start = function () {\r\n        if (this.state !== 1 /* UNINITIALIZED */) {\r\n            throw ERROR_FACTORY.create(\"trace started\" /* TRACE_STARTED_BEFORE */, {\r\n                traceName: this.name\r\n            });\r\n        }\r\n        this.api.mark(this.traceStartMark);\r\n        this.state = 2 /* RUNNING */;\r\n    };\r\n    /**\r\n     * Stops the trace. The measurement of the duration of the trace stops at this point and trace\r\n     * is logged.\r\n     */\r\n    Trace.prototype.stop = function () {\r\n        if (this.state !== 2 /* RUNNING */) {\r\n            throw ERROR_FACTORY.create(\"trace stopped\" /* TRACE_STOPPED_BEFORE */, {\r\n                traceName: this.name\r\n            });\r\n        }\r\n        this.state = 3 /* TERMINATED */;\r\n        this.api.mark(this.traceStopMark);\r\n        this.api.measure(this.traceMeasure, this.traceStartMark, this.traceStopMark);\r\n        this.calculateTraceMetrics();\r\n        logTrace(this);\r\n    };\r\n    /**\r\n     * Records a trace with predetermined values. If this method is used a trace is created and logged\r\n     * directly. No need to use start and stop methods.\r\n     * @param startTime Trace start time since epoch in millisec\r\n     * @param duration The duraction of the trace in millisec\r\n     * @param options An object which can optionally hold maps of custom metrics and custom attributes\r\n     */\r\n    Trace.prototype.record = function (startTime, duration, options) {\r\n        this.durationUs = Math.floor(duration * 1000);\r\n        this.startTimeUs = Math.floor(startTime * 1000);\r\n        if (options && options.attributes) {\r\n            this.customAttributes = tslib.__assign({}, options.attributes);\r\n        }\r\n        if (options && options.metrics) {\r\n            for (var _i = 0, _a = Object.keys(options.metrics); _i < _a.length; _i++) {\r\n                var metric = _a[_i];\r\n                if (!isNaN(Number(options.metrics[metric]))) {\r\n                    this.counters[metric] = Number(Math.floor(options.metrics[metric]));\r\n                }\r\n            }\r\n        }\r\n        logTrace(this);\r\n    };\r\n    /**\r\n     * Increments a custom metric by a certain number or 1 if number not specified. Will create a new\r\n     * custom metric if one with the given name does not exist. The value will be floored down to an\r\n     * integer.\r\n     * @param counter Name of the custom metric\r\n     * @param numAsInteger Increment by value\r\n     */\r\n    Trace.prototype.incrementMetric = function (counter, numAsInteger) {\r\n        if (numAsInteger === void 0) { numAsInteger = 1; }\r\n        if (this.counters[counter] === undefined) {\r\n            this.putMetric(counter, numAsInteger);\r\n        }\r\n        else {\r\n            this.putMetric(counter, this.counters[counter] + numAsInteger);\r\n        }\r\n    };\r\n    /**\r\n     * Sets a custom metric to a specified value. Will create a new custom metric if one with the\r\n     * given name does not exist. The value will be floored down to an integer.\r\n     * @param counter Name of the custom metric\r\n     * @param numAsInteger Set custom metric to this value\r\n     */\r\n    Trace.prototype.putMetric = function (counter, numAsInteger) {\r\n        if (isValidMetricName(counter, this.name)) {\r\n            this.counters[counter] = convertMetricValueToInteger(numAsInteger);\r\n        }\r\n        else {\r\n            throw ERROR_FACTORY.create(\"invalid custom metric name\" /* INVALID_CUSTOM_METRIC_NAME */, {\r\n                customMetricName: counter\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Returns the value of the custom metric by that name. If a custom metric with that name does\r\n     * not exist will return zero.\r\n     * @param counter\r\n     */\r\n    Trace.prototype.getMetric = function (counter) {\r\n        return this.counters[counter] || 0;\r\n    };\r\n    /**\r\n     * Sets a custom attribute of a trace to a certain value.\r\n     * @param attr\r\n     * @param value\r\n     */\r\n    Trace.prototype.putAttribute = function (attr, value) {\r\n        var isValidName = isValidCustomAttributeName(attr);\r\n        var isValidValue = isValidCustomAttributeValue(value);\r\n        if (isValidName && isValidValue) {\r\n            this.customAttributes[attr] = value;\r\n            return;\r\n        }\r\n        // Throw appropriate error when the attribute name or value is invalid.\r\n        if (!isValidName) {\r\n            throw ERROR_FACTORY.create(\"invalid attribute name\" /* INVALID_ATTRIBUTE_NAME */, {\r\n                attributeName: attr\r\n            });\r\n        }\r\n        if (!isValidValue) {\r\n            throw ERROR_FACTORY.create(\"invalid attribute value\" /* INVALID_ATTRIBUTE_VALUE */, {\r\n                attributeValue: value\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Retrieves the value a custom attribute of a trace is set to.\r\n     * @param attr\r\n     */\r\n    Trace.prototype.getAttribute = function (attr) {\r\n        return this.customAttributes[attr];\r\n    };\r\n    Trace.prototype.removeAttribute = function (attr) {\r\n        if (this.customAttributes[attr] === undefined) {\r\n            return;\r\n        }\r\n        delete this.customAttributes[attr];\r\n    };\r\n    Trace.prototype.getAttributes = function () {\r\n        return tslib.__assign({}, this.customAttributes);\r\n    };\r\n    Trace.prototype.setStartTime = function (startTime) {\r\n        this.startTimeUs = startTime;\r\n    };\r\n    Trace.prototype.setDuration = function (duration) {\r\n        this.durationUs = duration;\r\n    };\r\n    /**\r\n     * Calculates and assigns the duration and start time of the trace using the measure performance\r\n     * entry.\r\n     */\r\n    Trace.prototype.calculateTraceMetrics = function () {\r\n        var perfMeasureEntries = this.api.getEntriesByName(this.traceMeasure);\r\n        var perfMeasureEntry = perfMeasureEntries && perfMeasureEntries[0];\r\n        if (perfMeasureEntry) {\r\n            this.durationUs = Math.floor(perfMeasureEntry.duration * 1000);\r\n            this.startTimeUs = Math.floor((perfMeasureEntry.startTime + this.api.getTimeOrigin()) * 1000);\r\n        }\r\n    };\r\n    /**\r\n     * @param navigationTimings A single element array which contains the navigationTIming object of\r\n     * the page load\r\n     * @param paintTimings A array which contains paintTiming object of the page load\r\n     * @param firstInputDelay First input delay in millisec\r\n     */\r\n    Trace.createOobTrace = function (navigationTimings, paintTimings, firstInputDelay) {\r\n        var route = Api.getInstance().getUrl();\r\n        if (!route) {\r\n            return;\r\n        }\r\n        var trace = new Trace(OOB_TRACE_PAGE_LOAD_PREFIX + route, true);\r\n        var timeOriginUs = Math.floor(Api.getInstance().getTimeOrigin() * 1000);\r\n        trace.setStartTime(timeOriginUs);\r\n        // navigationTimings includes only one element.\r\n        if (navigationTimings && navigationTimings[0]) {\r\n            trace.setDuration(Math.floor(navigationTimings[0].duration * 1000));\r\n            trace.putMetric('domInteractive', Math.floor(navigationTimings[0].domInteractive * 1000));\r\n            trace.putMetric('domContentLoadedEventEnd', Math.floor(navigationTimings[0].domContentLoadedEventEnd * 1000));\r\n            trace.putMetric('loadEventEnd', Math.floor(navigationTimings[0].loadEventEnd * 1000));\r\n        }\r\n        var FIRST_PAINT = 'first-paint';\r\n        var FIRST_CONTENTFUL_PAINT = 'first-contentful-paint';\r\n        if (paintTimings) {\r\n            var firstPaint = paintTimings.find(function (paintObject) { return paintObject.name === FIRST_PAINT; });\r\n            if (firstPaint && firstPaint.startTime) {\r\n                trace.putMetric(FIRST_PAINT_COUNTER_NAME, Math.floor(firstPaint.startTime * 1000));\r\n            }\r\n            var firstContentfulPaint = paintTimings.find(function (paintObject) { return paintObject.name === FIRST_CONTENTFUL_PAINT; });\r\n            if (firstContentfulPaint && firstContentfulPaint.startTime) {\r\n                trace.putMetric(FIRST_CONTENTFUL_PAINT_COUNTER_NAME, Math.floor(firstContentfulPaint.startTime * 1000));\r\n            }\r\n            if (firstInputDelay) {\r\n                trace.putMetric(FIRST_INPUT_DELAY_COUNTER_NAME, Math.floor(firstInputDelay * 1000));\r\n            }\r\n        }\r\n        logTrace(trace);\r\n    };\r\n    Trace.createUserTimingTrace = function (measureName) {\r\n        var trace = new Trace(measureName, false, measureName);\r\n        logTrace(trace);\r\n    };\r\n    return Trace;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction createNetworkRequestEntry(entry) {\r\n    var performanceEntry = entry;\r\n    if (!performanceEntry || performanceEntry.responseStart === undefined) {\r\n        return;\r\n    }\r\n    var timeOrigin = Api.getInstance().getTimeOrigin();\r\n    var startTimeUs = Math.floor((performanceEntry.startTime + timeOrigin) * 1000);\r\n    var timeToResponseInitiatedUs = performanceEntry.responseStart\r\n        ? Math.floor((performanceEntry.responseStart - performanceEntry.startTime) * 1000)\r\n        : undefined;\r\n    var timeToResponseCompletedUs = Math.floor((performanceEntry.responseEnd - performanceEntry.startTime) * 1000);\r\n    // Remove the query params from logged network request url.\r\n    var url = performanceEntry.name && performanceEntry.name.split('?')[0];\r\n    var networkRequest = {\r\n        url: url,\r\n        responsePayloadBytes: performanceEntry.transferSize,\r\n        startTimeUs: startTimeUs,\r\n        timeToResponseInitiatedUs: timeToResponseInitiatedUs,\r\n        timeToResponseCompletedUs: timeToResponseCompletedUs\r\n    };\r\n    logNetworkRequest(networkRequest);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar FID_WAIT_TIME_MS = 5000;\r\nfunction setupOobResources() {\r\n    // Do not initialize unless iid is available.\r\n    if (!getIid()) {\r\n        return;\r\n    }\r\n    // The load event might not have fired yet, and that means performance navigation timing\r\n    // object has a duration of 0. The setup should run after all current tasks in js queue.\r\n    setTimeout(function () { return setupOobTraces(); }, 0);\r\n    setTimeout(function () { return setupNetworkRequests(); }, 0);\r\n    setTimeout(function () { return setupUserTimingTraces(); }, 0);\r\n}\r\nfunction setupNetworkRequests() {\r\n    var api = Api.getInstance();\r\n    var resources = api.getEntriesByType('resource');\r\n    for (var _i = 0, resources_1 = resources; _i < resources_1.length; _i++) {\r\n        var resource = resources_1[_i];\r\n        createNetworkRequestEntry(resource);\r\n    }\r\n    api.setupObserver('resource', createNetworkRequestEntry);\r\n}\r\nfunction setupOobTraces() {\r\n    var api = Api.getInstance();\r\n    var navigationTimings = api.getEntriesByType('navigation');\r\n    var paintTimings = api.getEntriesByType('paint');\r\n    // If First Input Desly polyfill is added to the page, report the fid value.\r\n    // https://github.com/GoogleChromeLabs/first-input-delay\r\n    if (api.onFirstInputDelay) {\r\n        // If the fid call back is not called for certain time, continue without it.\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        var timeoutId_1 = setTimeout(function () {\r\n            Trace.createOobTrace(navigationTimings, paintTimings);\r\n            timeoutId_1 = undefined;\r\n        }, FID_WAIT_TIME_MS);\r\n        api.onFirstInputDelay(function (fid) {\r\n            if (timeoutId_1) {\r\n                clearTimeout(timeoutId_1);\r\n                Trace.createOobTrace(navigationTimings, paintTimings, fid);\r\n            }\r\n        });\r\n    }\r\n    else {\r\n        Trace.createOobTrace(navigationTimings, paintTimings);\r\n    }\r\n}\r\nfunction setupUserTimingTraces() {\r\n    var api = Api.getInstance();\r\n    // Run through the measure performance entries collected up to this point.\r\n    var measures = api.getEntriesByType('measure');\r\n    for (var _i = 0, measures_1 = measures; _i < measures_1.length; _i++) {\r\n        var measure = measures_1[_i];\r\n        createUserTimingTrace(measure);\r\n    }\r\n    // Setup an observer to capture the measures from this point on.\r\n    api.setupObserver('measure', createUserTimingTrace);\r\n}\r\nfunction createUserTimingTrace(measure) {\r\n    var measureName = measure.name;\r\n    // Do not create a trace, if the user timing marks and measures are created by the sdk itself.\r\n    if (measureName.substring(0, TRACE_MEASURE_PREFIX.length) ===\r\n        TRACE_MEASURE_PREFIX) {\r\n        return;\r\n    }\r\n    Trace.createUserTimingTrace(measureName);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar PerformanceController = /** @class */ (function () {\r\n    function PerformanceController(app) {\r\n        this.app = app;\r\n        if (Api.getInstance().requiredApisAvailable()) {\r\n            util.validateIndexedDBOpenable()\r\n                .then(function (isAvailable) {\r\n                if (isAvailable) {\r\n                    setupTransportService();\r\n                    getInitializationPromise().then(setupOobResources, setupOobResources);\r\n                }\r\n            })\r\n                .catch(function (error) {\r\n                consoleLogger.info(\"Environment doesn't support IndexedDB: \" + error);\r\n            });\r\n        }\r\n    }\r\n    PerformanceController.prototype.trace = function (name) {\r\n        return new Trace(name);\r\n    };\r\n    Object.defineProperty(PerformanceController.prototype, \"instrumentationEnabled\", {\r\n        get: function () {\r\n            return SettingsService.getInstance().instrumentationEnabled;\r\n        },\r\n        set: function (val) {\r\n            SettingsService.getInstance().instrumentationEnabled = val;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PerformanceController.prototype, \"dataCollectionEnabled\", {\r\n        get: function () {\r\n            return SettingsService.getInstance().dataCollectionEnabled;\r\n        },\r\n        set: function (val) {\r\n            SettingsService.getInstance().dataCollectionEnabled = val;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    return PerformanceController;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar DEFAULT_ENTRY_NAME = '[DEFAULT]';\r\nfunction registerPerformance(instance) {\r\n    var factoryMethod = function (app, installations) {\r\n        if (app.name !== DEFAULT_ENTRY_NAME) {\r\n            throw ERROR_FACTORY.create(\"FB not default\" /* FB_NOT_DEFAULT */);\r\n        }\r\n        if (typeof window === 'undefined') {\r\n            throw ERROR_FACTORY.create(\"no window\" /* NO_WINDOW */);\r\n        }\r\n        setupApi(window);\r\n        SettingsService.getInstance().firebaseAppInstance = app;\r\n        SettingsService.getInstance().installationsService = installations;\r\n        return new PerformanceController(app);\r\n    };\r\n    // Register performance with firebase-app.\r\n    instance.INTERNAL.registerComponent(new component.Component('performance', function (container) {\r\n        /* Dependencies */\r\n        // getImmediate for FirebaseApp will always succeed\r\n        var app = container.getProvider('app').getImmediate();\r\n        // The following call will always succeed because perf has `import '@firebase/installations'`\r\n        var installations = container\r\n            .getProvider('installations')\r\n            .getImmediate();\r\n        return factoryMethod(app, installations);\r\n    }, \"PUBLIC\" /* PUBLIC */));\r\n    instance.registerVersion(name, version);\r\n}\r\nregisterPerformance(firebase__default['default']);\n\nexports.registerPerformance = registerPerformance;\n//# sourceMappingURL=index.cjs.js.map\n","import '@firebase/performance';\n//# sourceMappingURL=index.esm.js.map\n"]}