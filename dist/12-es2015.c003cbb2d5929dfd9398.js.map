{"version":3,"sources":["webpack:///src/app/modules/shared/project-list/project-search/project-search.functions.ts","webpack:///src/app/modules/shared/project-list/project-search/project-search.component.ts","webpack:///src/app/modules/shared/project-list/project-search/project-search.component.html","webpack:///src/app/modules/shared/project-list/project-item/project-icon-color.pipe.ts","webpack:///src/app/modules/shared/project-list/project-item/project-address.pipe.ts","webpack:///src/app/modules/shared/project-list/project-item/project-item.component.html","webpack:///src/app/modules/shared/project-list/project-item/project-item.component.ts","webpack:///src/app/modules/shared/project-list/projects-list.component.html","webpack:///src/app/modules/shared/project-list/projects-list.component.ts","webpack:///src/app/modules/features/restorable-projects/restorable-projects.component.html","webpack:///src/app/modules/features/restorable-projects/restorable-projects.component.ts","webpack:///src/app/store/effects/project.effect.ts","webpack:///src/app/modules/shared/project-list/project-list.module.ts","webpack:///src/app/modules/features/restorable-projects/restorable-projects.module.ts"],"names":["SortFunctions","a","b","lastEditedDate","ProjectSearchComponent","store","filteredProjects","currentSortFunction","searchTerm","this","emit","select","projectIds","allProjects","pipe","take","toPromise","projects","filter","proj","checkProject","sort","loaded","load","searched","search","sorted","map","p","id","project","term","name","toLowerCase","includes","setSearchTerm","ProjectIconColorPipe","colorTag","ProjectAddressPipe","addressText","street","zipcode","city","ProjectItemComponent","cdr","userId$","hasMenu","projectId","text","billingStreet","billingZipcode","billingCity","setState","menu","detectChanges","project$","projectItemState$","combineLatest","userId","unread","unreadCounts","active","unreadCount","ProjectsListComponent","setFilteredProjects","RestorableProjectsComponent","projectsService","initProjects","projects$","restoreProject","ProjectEffects","actions","loadDeletedProjectsEffect$","tap","_","console","log","initWatchDeletedProjects","dispatch","ProjectListModule","ROUTES","path","component","RestorableProjectsModule","forChild","forFeature"],"mappings":"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","file":"x","sourcesContent":["import { Project } from 'domain-entities';\n\nexport const SortFunctions = {\n\tsortByLastEdited: (a: Project, b: Project) => (a.lastEditedDate || 0) - (b.lastEditedDate || 0),\n};\n","import { Component, EventEmitter, Input, OnChanges, Output } from '@angular/core';\nimport { Project } from 'domain-entities';\nimport { AppState } from '../../../../store/state/app.state';\nimport { Store } from '@ngrx/store';\nimport { selectProjects } from '../../../features/projects/store/selectors/project.selectors';\nimport { take } from 'rxjs/operators';\nimport { SortFunctions } from './project-search.functions';\n\n@Component({\n\tselector: 'app-project-search-new',\n\ttemplateUrl: './project-search.component.html',\n\tstyleUrls: ['./project-search.component.scss'],\n})\nexport class ProjectSearchComponent implements OnChanges {\n\n\t@Input() allProjects: string[];\n\t@Output() filteredProjects = new EventEmitter<string[]>();\n\n\tcurrentSortFunction = SortFunctions.sortByLastEdited;\n\n\tsearchTerm = '';\n\n\tconstructor(\n\t\tprivate readonly store: Store<AppState>,\n\t) {\n\t}\n\n\tasync ngOnChanges(): Promise<void> {\n\t\tawait this.emit();\n\t}\n\n\tasync setSearchTerm(searchTerm: string): Promise<void> {\n\t\tthis.searchTerm = searchTerm;\n\t\tawait this.emit();\n\t}\n\n\tprivate async load(): Promise<Project[]> {\n\t\treturn await this.store.select(selectProjects, { projectIds: this.allProjects }).pipe(take(1)).toPromise();\n\t}\n\n\tprivate search(projects: Project[]): Project[] {\n\t\treturn projects.filter(proj => this.checkProject(proj, this.searchTerm));\n\t}\n\n\tprivate sort(projects: Project[]): Project[] {\n\t\treturn projects.sort(this.currentSortFunction);\n\t}\n\n\tprivate async emit(): Promise<void> {\n\t\tconst loaded = await this.load();\n\t\tconst searched = this.search(loaded);\n\t\tconst sorted = this.sort(searched);\n\t\tthis.filteredProjects.emit(sorted.map(p => p.id));\n\t}\n\n\t// Extend this with filters etc\n\tprivate checkProject(project: Project, term: string): boolean {\n\t\treturn project.name.toLowerCase().includes(term.toLowerCase());\n\t}\n\n}\n","<div class=\"search-wrapper\">\n\t<input #searchElement [placeholder]=\"'widgets.search.placeholder' | translate\" matInput\n\t\t\t\t (keyup)=\"setSearchTerm(searchElement.value)\">\n\t<div style=\"display: none\">\n\t\t<mat-form-field>\n\t\t\t<input matInput/>\n\t\t</mat-form-field>\n\t</div>\n</div>\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { Project } from 'domain-entities';\n\n@Pipe({\n\tname: 'projectIconColor',\n})\nexport class ProjectIconColorPipe implements PipeTransform {\n\n\ttransform(project: Project): string {\n\t\tswitch (project.colorTag) {\n\t\t\tcase 'COLOR1':\n\t\t\t\treturn 'tag-red';\n\t\t\tcase 'COLOR2':\n\t\t\t\treturn 'tag-orange';\n\t\t\tcase 'COLOR3':\n\t\t\t\treturn 'tag-yellow';\n\t\t\tcase 'COLOR4':\n\t\t\t\treturn 'tag-green';\n\t\t\tcase 'COLOR5':\n\t\t\t\treturn 'tag-purple';\n\t\t\tcase 'COLOR6':\n\t\t\t\treturn 'tag-blue';\n\t\t\tcase 'COLOR7':\n\t\t\t\treturn 'tag-teal';\n\t\t\tcase 'COLOR8':\n\t\t\t\treturn 'tag-pink';\n\t\t\tcase 'COLOR9':\n\t\t\t\treturn 'tag-dirty-green';\n\t\t\tcase 'COLOR10':\n\t\t\t\treturn 'tag-royal-blue';\n\t\t\tdefault:\n\t\t\t\treturn 'tag-royal-blue';\n\t\t}\n\t}\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { Project } from 'domain-entities';\n\n@Pipe({\n\tname: 'projectAddress',\n})\nexport class ProjectAddressPipe implements PipeTransform {\n\n\ttransform(project: Project): string {\n\t\tlet addressText = '';\n\t\tif (project.street) {\n\t\t\taddressText += `${project.street}, `;\n\t\t}\n\t\tif (project.zipcode) {\n\t\t\taddressText += `${project.zipcode} `;\n\t\t}\n\t\tif (project.city) {\n\t\t\taddressText += ` ${project.city}`;\n\t\t}\n\t\treturn addressText;\n\t}\n}\n","<div *ngIf=\"(projectItemState$ | async) as state\">\n\t<div class=\"project-item d-flex montserrat-text-light\">\n\t\t<div class=\"project-item__icon d-flex h-100\">\n\t\t\t<ng-container *ngIf=\"state.project.projectType === 'PROJECT'\">\n\t\t\t\t<ng-container *ngTemplateOutlet=\"projectIcon; context: {project: state.project}\"></ng-container>\n\t\t\t</ng-container>\n\t\t\t<ng-container *ngIf=\"state.project.projectType === 'FOLDER'\" [ngTemplateOutlet]=\"folderIcon\"></ng-container>\n\t\t</div>\n\t\t<ng-container *ngTemplateOutlet=\"projectItemTextinfo; context: {project: state.project}\"></ng-container>\n\t\t<div class=\"project-item__action-icons flex-grow-1\">\n\t\t\t<ng-container *ngTemplateOutlet=\"actions; context: context\"></ng-container>\n\t\t</div>\n\t\t<div *ngIf=\"displayNotifications\" class=\"project-item__notification-icons\">\n\t\t\t<div *ngIf=\"state.unreadCount\" class=\"project-item__notification-icons__unread\">{{state.unreadCount}}</div>\n\t\t</div>\n\t\t<div *ngIf=\"hasMenu\" class=\"pr-3 pointer\">\n\t\t\t<mat-icon class=\"more-vert grey-icon\">more_vert</mat-icon>\n\t\t</div>\n\t</div>\n</div>\n\n<ng-template #projectIcon let-project=\"project\">\n\t<div class=\"project-item__icon__project\"\n\t\t\t [ngClass]=\"project | projectIconColor\">{{project.name[0] | uppercase}}</div>\n</ng-template>\n\n<ng-template #folderIcon>\n\t<mat-icon class=\"grey-icon\">folder</mat-icon>\n</ng-template>\n\n<ng-template #projectItemTextinfo let-project=\"project\">\n\t<div class=\"project-item__text-info\">\n\t\t<div class=\"project-item__text-info__name\">{{project.name}}</div>\n\t\t<div class=\"project-item__text-info__id\">{{project.orderNumber}}</div>\n\t\t<div class=\"project-item__text-info__address\">{{project | projectAddress}}</div>\n\t</div>\n</ng-template>\n","import { AfterContentInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, Input, OnChanges, TemplateRef } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Project } from 'domain-entities';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { AppState } from '../../../../store/state/app.state';\nimport { selectDomainEntityProject } from '../../../features/projects/store/selectors/project.selectors';\nimport { selectUserId } from '../../../../store/selectors/app.selectors';\n\ninterface ProjectItemsState {\n\tproject: Project;\n\tactive: boolean;\n\tunreadCount: number | null;\n}\n\n@Component({\n\tselector: 'app-project-item-2',\n\ttemplateUrl: './project-item.component.html',\n\tstyleUrls: ['./project-item.component.scss'],\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProjectItemComponent implements AfterContentInit, OnChanges {\n\n\t@Input() projectId: string;\n\t@Input() active: boolean;\n\t@Input() actions: TemplateRef<any>;\n\t@Input() menu: TemplateRef<any>;\n\t@Input() displayNotifications: boolean;\n\n\tprivate userId$ = this.store.select(selectUserId);\n\n\tget context(): { project: string } {\n\t\treturn { project: this.projectId };\n\t}\n\n\thasMenu = false;\n\n\tprojectItemState$: Observable<ProjectItemsState>;\n\n\tgetAddressText(project: Project): string {\n\t\tlet text = '';\n\t\tif (project.billingStreet) {\n\t\t\ttext += `${project.billingStreet}, `;\n\t\t}\n\t\tif (project.billingZipcode) {\n\t\t\ttext += `${project.billingZipcode} `;\n\t\t}\n\t\tif (project.billingCity) {\n\t\t\ttext += ` ${project.billingCity}`;\n\t\t}\n\t\treturn text;\n\t}\n\n\tconstructor(\n\t\tprivate readonly store: Store<AppState>,\n\t\tprivate readonly cdr: ChangeDetectorRef,\n\t) {\n\t}\n\n\tngOnChanges(): void {\n\t\tthis.setState();\n\t}\n\n\tngAfterContentInit(): void {\n\t\tthis.hasMenu = !!this.menu;\n\t\tthis.cdr.detectChanges();\n\t}\n\n\tprivate setState(): void {\n\t\tconst project$ = this.store.select(selectDomainEntityProject, { projectId: this.projectId });\n\t\tthis.projectItemState$ = combineLatest([project$, this.userId$]).pipe(map(([project, userId]) => {\n\t\t\tlet unread = null;\n\t\t\tif (userId && project.unreadCounts && project.unreadCounts[userId]) {\n\t\t\t\tunread = project.unreadCounts[userId];\n\t\t\t}\n\t\t\tconst state: ProjectItemsState = {\n\t\t\t\tproject,\n\t\t\t\tactive: this.active,\n\t\t\t\tunreadCount: unread,\n\t\t\t};\n\t\t\treturn state;\n\t\t}));\n\t}\n}\n","<div class=\"h-100 d-flex flex-column\">\n\t<app-project-search-new [allProjects]=\"projects\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t(filteredProjects)=\"setFilteredProjects($event)\"></app-project-search-new>\n\t<div class=\"project-items--container d-flex flex-grow-1\">\n\t\t<cdk-virtual-scroll-viewport class=\"flex-grow-1\" itemSize=\"136\" minBufferPx=\"200\" maxBufferPx=\"400\">\n\t\t\t<div class=\"my-3\" *cdkVirtualFor=\"let proj of filteredProjects\">\n\t\t\t\t<app-project-item-2 [displayNotifications]=\"displayNotifications\" [projectId]=\"proj\" [actions]=\"actions\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[menu]=\"menu\">\n\t\t\t\t</app-project-item-2>\n\t\t\t</div>\n\n\t\t</cdk-virtual-scroll-viewport>\n\t</div>\n</div>\n\n\n","import { AfterContentInit, ChangeDetectorRef, Component, ContentChild, Input, TemplateRef } from '@angular/core';\nimport { AppState } from '../../../store/state/app.state';\nimport { Selector, Store } from '@ngrx/store';\n\n@Component({\n\tselector: 'app-projects-list',\n\ttemplateUrl: './projects-list.component.html',\n\tstyleUrls: ['./projects-list.component.scss'],\n})\nexport class ProjectsListComponent implements AfterContentInit {\n\n\t@ContentChild('actions', { read: TemplateRef, static: false }) actions: TemplateRef<any>;\n\t@ContentChild('menu', { read: TemplateRef, static: false }) menu: TemplateRef<any>;\n\n\t@Input() projectSelector: Selector<AppState, string[]>;\n\t@Input() displayNotifications: boolean;\n\t@Input() projects: string[] = [];\n\n\tfilteredProjects: string[] = [];\n\n\thasMenu = false;\n\n\tconstructor(\n\t\tprivate readonly store: Store<AppState>,\n\t\tprivate readonly cdr: ChangeDetectorRef,\n\t) {\n\t}\n\n\tngAfterContentInit(): void {\n\t\tthis.hasMenu = !!this.menu;\n\t\tthis.cdr.detectChanges();\n\t}\n\n\tsetFilteredProjects(filteredProjects: string[]): void {\n\t\tthis.filteredProjects = filteredProjects;\n\t}\n}\n","<div class=\"d-flex flex-column h-100\">\n\t<app-settings-page-header\n\t\tbackNavigationRoute=\"/settings\">{{'restorableProjects.title' | translate}}</app-settings-page-header>\n\t<div class=\"d-flex flex-grow-1\">\n\t\t<app-projects-list\n\t\t\t[projects]=\"projects$ | async\"\n\t\t\t[displayNotifications]=\"false\">\n\t\t\t<ng-template let-project=\"project\" #actions\n\t\t\t\t\t\t\t\t\t class=\"project-item__action-items h-100 d-flex flex-column justify-content-center\">\n\t\t\t\t<div class=\"h-100 d-flex flex-column justify-content-center align-items-end\">\n\t\t\t\t\t<mat-icon (click)=\"restoreProject(project)\" class=\"pointer\">restore</mat-icon>\n\t\t\t\t</div>\n\t\t\t</ng-template>\n\t\t</app-projects-list>\n\t\t<div class=\"pt-5 h-100 w-100 d-flex flex-column align-items-center cn-restore-hints\">\n\t\t\t<div>\n\t\t\t\t<img alt=\"Hint Icon\" class=\"img-fluid\" src=\"assets/images/icons/empty-state-dirk.svg\" />\n\t\t\t</div>\n\t\t\t<div class=\"text-uppercase cn-restore-hints__primary\">{{'restorableProjects.hint-1' | translate}}</div>\n\t\t\t<div class=\"cn-restore-hints__secondary\">{{'restorableProjects.hint-2' | translate}}\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n\n","import { Component } from '@angular/core';\nimport { AppState } from '../../../store/state/app.state';\nimport { Store } from '@ngrx/store';\nimport { selectDeletedProjects } from '../projects/store/selectors/project.selectors';\nimport { Observable } from 'rxjs';\nimport { ProjectService } from '../../../shared/firebase/project.service';\n\n@Component({\n\tselector: 'app-restorable-projects',\n\ttemplateUrl: './restorable-projects.component.html',\n\tstyleUrls: ['./restorable-projects.component.scss'],\n})\nexport class RestorableProjectsComponent {\n\tprojects$: Observable<string[]>;\n\n\tconstructor(\n\t\tprivate readonly store: Store<AppState>,\n\t\tprivate readonly projectsService: ProjectService,\n\t) {\n\t\tthis.initProjects();\n\t}\n\n\tinitProjects(): void {\n\t\tthis.projects$ = this.store.select(selectDeletedProjects);\n\t}\n\n\tasync restoreProject(projectId: string): Promise<void> {\n\t\tawait this.projectsService.restoreProject(projectId);\n\t}\n}\n","import { Actions, Effect, ofType } from '@ngrx/effects';\nimport { tap } from 'rxjs/operators';\nimport { Injectable } from '@angular/core';\nimport { ProjectService } from '../../shared/firebase/project.service';\nimport { loadDeletedProjectsAction } from '../../modules/features/projects/store/actions/project.actions';\nimport { Action } from '@ngrx/store';\n\n@Injectable()\nexport class ProjectEffects {\n\n\tconstructor(\n\t\tprivate readonly actions: Actions,\n\t\tprivate readonly projectsService: ProjectService,\n\t) {\n\t}\n\n\n\t@Effect(\n\t\t{ dispatch: false },\n\t)\n\tloadDeletedProjectsEffect$ = this.actions.pipe(ofType(loadDeletedProjectsAction), tap(_ => {\n\t\tconsole.log('Loading deleted projects');\n\t\tthis.projectsService.initWatchDeletedProjects();\n\t}));\n\n\tngrxOnInitEffects(): Action {\n\t\treturn loadDeletedProjectsAction();\n\t}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ProjectsListComponent } from './projects-list.component';\nimport { ProjectItemComponent } from './project-item/project-item.component';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { MatFormFieldModule, MatIconModule, MatInputModule } from '@angular/material';\nimport { ProjectSearchComponent } from './project-search/project-search.component';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ProjectSearchModule } from '../../../work/project-search/project-search.module';\nimport { ProjectAddressPipe } from './project-item/project-address.pipe';\nimport { ProjectIconColorPipe } from './project-item/project-icon-color.pipe';\n\n\n@NgModule({\n\tdeclarations: [\n\t\tProjectsListComponent,\n\t\tProjectItemComponent,\n\t\tProjectSearchComponent,\n\t\tProjectAddressPipe,\n\t\tProjectIconColorPipe,\n\t],\n\timports: [\n\t\tCommonModule,\n\t\tScrollingModule,\n\t\tMatIconModule,\n\t\tMatInputModule,\n\t\tMatFormFieldModule,\n\t\tTranslateModule,\n\t\tProjectSearchModule,\n\t],\n\texports: [\n\t\tProjectsListComponent,\n\t],\n})\nexport class ProjectListModule {\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { MatIconModule, MatMenuModule } from '@angular/material';\nimport { RestorableProjectsComponent } from './restorable-projects.component';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { EffectsModule } from '@ngrx/effects';\nimport { RouterModule, Routes } from '@angular/router';\nimport { ProjectEffects } from '../../../store/effects/project.effect';\nimport { ProjectListModule } from '../../shared/project-list/project-list.module';\nimport { SettingsPageHeaderModule } from '../../shared/settings-page-header/settings-page-header.module';\n\nconst ROUTES: Routes = [{\n\tpath: '',\n\tcomponent: RestorableProjectsComponent,\n}];\n\n@NgModule({\n\tdeclarations: [RestorableProjectsComponent],\n\timports: [\n\t\tRouterModule.forChild(ROUTES),\n\t\tCommonModule,\n\t\tTranslateModule,\n\t\tMatIconModule,\n\t\tMatMenuModule,\n\t\tScrollingModule,\n\t\tProjectListModule,\n\t\tSettingsPageHeaderModule,\n\t\tEffectsModule.forFeature([ProjectEffects]),\n\t],\n})\nexport class RestorableProjectsModule {\n}\n"]}