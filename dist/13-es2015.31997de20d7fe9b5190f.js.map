{"version":3,"sources":["webpack:///src/app/modules/features/subscription/store/actions/products.actions.ts","webpack:///src/app/modules/features/subscription/store/reducers/products.reducer.ts","webpack:///src/app/modules/features/subscription/store/selectors/products.selectors.ts","webpack:///node_modules/@angular/material/__ivy_ngcc__/esm2015/card.js","webpack:///src/app/modules/features/subscription/storage-options-dialog/storage-option-card/storage-option-card.component.ts","webpack:///src/app/modules/features/subscription/storage-options-dialog/storage-option-card/storage-option-card.component.html","webpack:///src/app/modules/features/subscription/storage-options-dialog/storage-options-dialog.component.html","webpack:///src/app/modules/features/subscription/storage-options-dialog/storage-options-dialog.component.ts","webpack:///src/app/modules/features/subscription/subscription/manage-payment-interval/manage-payment-interval.component.html","webpack:///src/app/modules/features/subscription/subscription/manage-payment-interval/manage-payment-interval.component.ts","webpack:///src/app/modules/features/subscription/subscription/subscription.component.html","webpack:///src/app/modules/features/subscription/subscription/subscription.component.ts","webpack:///src/app/shared/toggle/toggle.component.html","webpack:///src/app/shared/toggle/toggle.component.ts","webpack:///src/app/modules/features/subscription/products/product-change/product-change.component.html","webpack:///src/app/modules/features/subscription/products/product-change/product-change.component.ts","webpack:///src/app/modules/features/subscription/products/product-card/product-card.component.html","webpack:///src/app/modules/features/subscription/products/product-card/product-card.component.ts","webpack:///src/app/modules/features/subscription/products/product-confirm/product-confirm.component.html","webpack:///src/app/modules/features/subscription/products/product-confirm/product-confirm.component.ts","webpack:///src/app/modules/features/subscription/products/products.component.html","webpack:///src/app/modules/features/subscription/subscription-routing.module.ts","webpack:///src/app/modules/features/subscription/products/products.component.ts","webpack:///src/app/modules/features/subscription/store/effects/products.effects.ts","webpack:///src/app/modules/features/subscription/subscription.module.ts"],"names":["loadProducts","setProducts","scoreboardReducer","state","payload","products","reducer","action","selectProductsState","selectProductsTypeSubscription","filter","product","type","ProductType","SUBSCRIPTION","selectProductsTypeStorageUpgrade","STORAGE_UPGRADE","selectProductsTypeSubscriptionAndTrial","TRIAL","_c0","_c1","MatCard","_animationMode","this","ɵfac","t","ɵcmp","selectors","hostAttrs","hostVars","hostBindings","rf","ctx","exportAs","ngContentSelectors","decls","vars","template","styles","encapsulation","changeDetection","MatCardModule","ɵmod","ɵinj","factory","imports","StorageOptionCardComponent","StorageOptionsDialogComponent","store","dialogRef","initProducts","close","storageUpgradeProducts$","select","pipe","map","prods","sort","a","b","grade","ManagePaymentIntervalComponent","translateService","productChangeService","subscriptionChangeTranslationService","trackingDispatcherService","_selectedPaymentInterval","PlanPaymentInterval","MONTHLY","locked","costText","changeDateText","currentlySubscribedInterval","selectedPaymentInterval","updatePaymentInterval","paymentIntervalChange","status","SubscriptionChangeStatus","PROCESSING","CONFIRMED","getChangeText","getChangeDateText","_paymentIntervalChange","referenceDate","changeDirection","SubscriptionChangeDirection","DOWNGRADE","subscription","renewalDate","unix","vatRate","billingDetails","billing","address","country","to","plan","cost","getCostChangeText","getDateChangeText","emitTrackingEvent","SUBSCRIPTION_OVERVIEW_INTERVAL_CONFIRM","confirmSubscriptionChange","onConfirm","SubscriptionComponent","subscriptionService","companyService","authService","profileService","productService","translate","decimalPipe","hotjarTrackingService","dialog","companyLimits$","subscription$","BehaviorSubject","billingDetails$","products$","editUser","editPaymentInterval","TrackEventType","onDestroy$","Subject","loading","setupCompany","setupSubscription","setupOverviewData","setupBillingDetails","setupPaymentIntervalChange","setupEmployeesChange","setupTrial","next","complete","profile$","$authState","user","mergeMap","getProfile","uid","shareReplay","company$","profile","getCompany","company","getActiveSubscription","takeUntil","subscribe","getActiveSubscriptionAndProduct","switchMap","getBillingInformation","id","overviewData$","combineLatest","params","companyLimits","filteredProducts","prod","result","allProducts","storageData","createStorageData","allPlans","plans","forEach","push","planOfSubscription","find","stripeId","currentState","planId","productOfSubscription","numberOfUsers","quantity","price","pricePerUser","couponResponse","getOrLoadCouponResponse","getPrice","getPricePerUser","paymentIntervalChange$","getProductChanges","change","changeType","SubscriptionChangeType","PAYMENT_INTERVAL","tap","employeesChange$","EMPLOYEES_CHANGE","overviewData","getProductChangeText","timeUnit","paymentInterval","dateOfPeriodStart","subtract","response","ignoreValid","toLowerCase","getCurrencyCostText","instant","overallCostPerUser","usedGBytes","transform","getPaymentIntervalChangeText","getLicensesChangeText","undoPlanChange","isTrial$","data","open","width","panelClass","companyLimit","availableGbs","storageGBytes","usedGbs","storageBytes","gbPercentage","ToggleComponent","selected","index","emit","ProductChangeComponent","_gradeOfCard","parseInt","setChangeType","currentProductGrade","UPGRADE","freeTierProductGrade","productChangeType","UNCHANGED","scheduledProductGrade","scheduleProductChange","ProductCardComponent","ProductConfirmComponent","dateService","localeId","productChange","PRODUCT_CHANGE","changeText","trackProductChange","_productChange","setChangeText","questionPartOne","questionPartTwo","questionPartThree","dateText","newProduct","confirmed","event","SUBSCRIPTION_PRODUCTS_UPGRADE_CONFIRM","SUBSCRIPTION_PRODUCTS_DOWNGRADE_CONFIRM","SUBSCRIPTION_PRODUCTS_DOWNGRADE_OPEN","SUBSCRIPTION_PRODUCTS_UPGRADE_OPEN","routes","path","component","pathMatch","authGuardPipe","ProductsComponent","subscriptionWizardDialog","trackingDispatchService","router","activeRoute","items","translateKey","note","planPaymentInterval","YEARLY","destroy$","itemSelected","initSubscriptionOfCompany","initProductState","initCompany","initProductChanges","initConfirmationWatch","initWizard","initToggleWatch","initDirectlyRoutedProduct","selectedToggle","findIndex","item","track","SUBSCRIPTION_PRODUCTS_INTERVAL_TOGGLE","productState$","defaultProduct","currentProduct","nextProduct","productChange$","NEW_SUBSCRIPTION","allSubscription$","getCompanySubscriptions","subscriptions","sub","initData","take","toPromise","wizardDialogRef","disableClose","changes","navigate","OPEN","trackWizardOpen","openSubscriptionWizard","costPerUser","SUBSCRIPTION_PRODUCTS_WIZARD_OPEN","snapshot","queryParams","term","activeSubscription","isTrialSubscription","getCurrentSubscription","trialSubscription","toUpperCase","productName","selectedProduct","productTypeSubscription","shortName","SubscriptionRoutingModule","forChild","ProductsEffects","actions$","loadProducts$","getAvailableProducts","SubscriptionModule","forFeature"],"mappings":"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","file":"x","sourcesContent":["import { createAction, props } from '@ngrx/store';\nimport { Product } from 'domain-entities';\n\nexport const loadProducts = createAction(\n\t'[Products] Load Products',\n);\n\nexport const setProducts = createAction(\n\t'[Products] Set Products',\n\tprops<{ products: Product[] }>(),\n);\n","import { Action, createReducer, on } from '@ngrx/store';\nimport { ProductsState } from '../state/products.state';\nimport * as fromProductActions from '../actions/products.actions';\n\nexport const productsFeatureKey = 'products';\n\nconst initialState = [];\n\nconst scoreboardReducer = createReducer(\n\tinitialState,\n\ton(fromProductActions.setProducts, (state, payload) => {\n\t\treturn [...payload.products];\n\t}),\n);\n\n// tslint:disable-next-line:typedef\nexport function reducer(state: ProductsState | undefined, action: Action) {\n\treturn scoreboardReducer(state, action);\n}\n","import { createFeatureSelector, createSelector } from '@ngrx/store';\nimport { ProductsState } from '../state/products.state';\nimport { productsFeatureKey } from '../reducers/products.reducer';\nimport { ProductType } from 'domain-entities';\n\nexport const selectProductsState = createFeatureSelector<ProductsState>(productsFeatureKey);\n\nexport const selectProductsTypeSubscription = createSelector(\n\tselectProductsState,\n\t(products) => products.filter(product => product.type === ProductType.SUBSCRIPTION),\n);\n\nexport const selectProductsTypeStorageUpgrade = createSelector(\n\tselectProductsState,\n\t(products) => products.filter(product => product.type === ProductType.STORAGE_UPGRADE));\n\nexport const selectProductsTypeSubscriptionAndTrial = createSelector(\n\tselectProductsState,\n\t(products) => products.filter(product => product.type === ProductType.SUBSCRIPTION || product.type === ProductType.TRIAL));\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Component, ViewEncapsulation, ChangeDetectionStrategy, Directive, Input, Optional, Inject, NgModule } from '@angular/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { MatCommonModule } from '@angular/material/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\n\nconst _c0 = [\"*\", [[\"mat-card-footer\"]]];\nconst _c1 = [\"*\", \"mat-card-footer\"];\nconst _c2 = [[[\"\", \"mat-card-avatar\", \"\"], [\"\", \"matCardAvatar\", \"\"]], [[\"mat-card-title\"], [\"mat-card-subtitle\"], [\"\", \"mat-card-title\", \"\"], [\"\", \"mat-card-subtitle\", \"\"], [\"\", \"matCardTitle\", \"\"], [\"\", \"matCardSubtitle\", \"\"]], \"*\"];\nconst _c3 = [\"[mat-card-avatar], [matCardAvatar]\", \"mat-card-title, mat-card-subtitle, [mat-card-title], [mat-card-subtitle], [matCardTitle], [matCardSubtitle]\", \"*\"];\nconst _c4 = [[[\"mat-card-title\"], [\"mat-card-subtitle\"], [\"\", \"mat-card-title\", \"\"], [\"\", \"mat-card-subtitle\", \"\"], [\"\", \"matCardTitle\", \"\"], [\"\", \"matCardSubtitle\", \"\"]], [[\"img\"]], \"*\"];\nconst _c5 = [\"mat-card-title, mat-card-subtitle, [mat-card-title], [mat-card-subtitle], [matCardTitle], [matCardSubtitle]\", \"img\", \"*\"];\nclass MatCardContent {\n}\nMatCardContent.ɵfac = function MatCardContent_Factory(t) { return new (t || MatCardContent)(); };\nMatCardContent.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatCardContent, selectors: [[\"mat-card-content\"]], hostAttrs: [1, \"mat-card-content\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatCardContent, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-card-content',\n                host: { 'class': 'mat-card-content' }\n            }]\n    }], null, null); })();\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nclass MatCardTitle {\n}\nMatCardTitle.ɵfac = function MatCardTitle_Factory(t) { return new (t || MatCardTitle)(); };\nMatCardTitle.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatCardTitle, selectors: [[\"mat-card-title\"], [\"\", \"mat-card-title\", \"\"], [\"\", \"matCardTitle\", \"\"]], hostAttrs: [1, \"mat-card-title\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatCardTitle, [{\n        type: Directive,\n        args: [{\n                selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n                host: {\n                    'class': 'mat-card-title'\n                }\n            }]\n    }], null, null); })();\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nclass MatCardSubtitle {\n}\nMatCardSubtitle.ɵfac = function MatCardSubtitle_Factory(t) { return new (t || MatCardSubtitle)(); };\nMatCardSubtitle.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatCardSubtitle, selectors: [[\"mat-card-subtitle\"], [\"\", \"mat-card-subtitle\", \"\"], [\"\", \"matCardSubtitle\", \"\"]], hostAttrs: [1, \"mat-card-subtitle\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatCardSubtitle, [{\n        type: Directive,\n        args: [{\n                selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n                host: {\n                    'class': 'mat-card-subtitle'\n                }\n            }]\n    }], null, null); })();\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nclass MatCardActions {\n    constructor() {\n        /**\n         * Position of the actions inside the card.\n         */\n        this.align = 'start';\n    }\n}\nMatCardActions.ɵfac = function MatCardActions_Factory(t) { return new (t || MatCardActions)(); };\nMatCardActions.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatCardActions, selectors: [[\"mat-card-actions\"]], hostAttrs: [1, \"mat-card-actions\"], hostVars: 2, hostBindings: function MatCardActions_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-card-actions-align-end\", ctx.align === \"end\");\n    } }, inputs: { align: \"align\" }, exportAs: [\"matCardActions\"] });\nMatCardActions.propDecorators = {\n    align: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatCardActions, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-card-actions',\n                exportAs: 'matCardActions',\n                host: {\n                    'class': 'mat-card-actions',\n                    '[class.mat-card-actions-align-end]': 'align === \"end\"'\n                }\n            }]\n    }], function () { return []; }, { align: [{\n            type: Input\n        }] }); })();\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nclass MatCardFooter {\n}\nMatCardFooter.ɵfac = function MatCardFooter_Factory(t) { return new (t || MatCardFooter)(); };\nMatCardFooter.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatCardFooter, selectors: [[\"mat-card-footer\"]], hostAttrs: [1, \"mat-card-footer\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatCardFooter, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-card-footer',\n                host: { 'class': 'mat-card-footer' }\n            }]\n    }], null, null); })();\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nclass MatCardImage {\n}\nMatCardImage.ɵfac = function MatCardImage_Factory(t) { return new (t || MatCardImage)(); };\nMatCardImage.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatCardImage, selectors: [[\"\", \"mat-card-image\", \"\"], [\"\", \"matCardImage\", \"\"]], hostAttrs: [1, \"mat-card-image\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatCardImage, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-card-image], [matCardImage]',\n                host: { 'class': 'mat-card-image' }\n            }]\n    }], null, null); })();\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nclass MatCardSmImage {\n}\nMatCardSmImage.ɵfac = function MatCardSmImage_Factory(t) { return new (t || MatCardSmImage)(); };\nMatCardSmImage.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatCardSmImage, selectors: [[\"\", \"mat-card-sm-image\", \"\"], [\"\", \"matCardImageSmall\", \"\"]], hostAttrs: [1, \"mat-card-sm-image\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatCardSmImage, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-card-sm-image], [matCardImageSmall]',\n                host: { 'class': 'mat-card-sm-image' }\n            }]\n    }], null, null); })();\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nclass MatCardMdImage {\n}\nMatCardMdImage.ɵfac = function MatCardMdImage_Factory(t) { return new (t || MatCardMdImage)(); };\nMatCardMdImage.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatCardMdImage, selectors: [[\"\", \"mat-card-md-image\", \"\"], [\"\", \"matCardImageMedium\", \"\"]], hostAttrs: [1, \"mat-card-md-image\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatCardMdImage, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-card-md-image], [matCardImageMedium]',\n                host: { 'class': 'mat-card-md-image' }\n            }]\n    }], null, null); })();\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nclass MatCardLgImage {\n}\nMatCardLgImage.ɵfac = function MatCardLgImage_Factory(t) { return new (t || MatCardLgImage)(); };\nMatCardLgImage.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatCardLgImage, selectors: [[\"\", \"mat-card-lg-image\", \"\"], [\"\", \"matCardImageLarge\", \"\"]], hostAttrs: [1, \"mat-card-lg-image\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatCardLgImage, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-card-lg-image], [matCardImageLarge]',\n                host: { 'class': 'mat-card-lg-image' }\n            }]\n    }], null, null); })();\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nclass MatCardXlImage {\n}\nMatCardXlImage.ɵfac = function MatCardXlImage_Factory(t) { return new (t || MatCardXlImage)(); };\nMatCardXlImage.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatCardXlImage, selectors: [[\"\", \"mat-card-xl-image\", \"\"], [\"\", \"matCardImageXLarge\", \"\"]], hostAttrs: [1, \"mat-card-xl-image\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatCardXlImage, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-card-xl-image], [matCardImageXLarge]',\n                host: { 'class': 'mat-card-xl-image' }\n            }]\n    }], null, null); })();\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nclass MatCardAvatar {\n}\nMatCardAvatar.ɵfac = function MatCardAvatar_Factory(t) { return new (t || MatCardAvatar)(); };\nMatCardAvatar.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatCardAvatar, selectors: [[\"\", \"mat-card-avatar\", \"\"], [\"\", \"matCardAvatar\", \"\"]], hostAttrs: [1, \"mat-card-avatar\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatCardAvatar, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-card-avatar], [matCardAvatar]',\n                host: { 'class': 'mat-card-avatar' }\n            }]\n    }], null, null); })();\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\nclass MatCard {\n    // @breaking-change 9.0.0 `_animationMode` parameter to be made required.\n    /**\n     * @param {?=} _animationMode\n     */\n    constructor(_animationMode) {\n        this._animationMode = _animationMode;\n    }\n}\nMatCard.ɵfac = function MatCard_Factory(t) { return new (t || MatCard)(ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatCard.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatCard, selectors: [[\"mat-card\"]], hostAttrs: [1, \"mat-card\"], hostVars: 2, hostBindings: function MatCard_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    } }, exportAs: [\"matCard\"], ngContentSelectors: _c1, decls: 2, vars: 0, template: function MatCard_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c0);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵprojection(1, 1);\n    } }, styles: [\".mat-card{transition:box-shadow 280ms cubic-bezier(.4,0,.2,1);display:block;position:relative;padding:16px;border-radius:4px}._mat-animation-noopable.mat-card{transition:none;animation:none}.mat-card .mat-divider-horizontal{position:absolute;left:0;width:100%}[dir=rtl] .mat-card .mat-divider-horizontal{left:auto;right:0}.mat-card .mat-divider-horizontal.mat-divider-inset{position:static;margin:0}[dir=rtl] .mat-card .mat-divider-horizontal.mat-divider-inset{margin-right:0}@media (-ms-high-contrast:active){.mat-card{outline:solid 1px}}.mat-card-actions,.mat-card-content,.mat-card-subtitle{display:block;margin-bottom:16px}.mat-card-title{display:block;margin-bottom:8px}.mat-card-actions{margin-left:-8px;margin-right:-8px;padding:8px 0}.mat-card-actions-align-end{display:flex;justify-content:flex-end}.mat-card-image{width:calc(100% + 32px);margin:0 -16px 16px -16px}.mat-card-footer{display:block;margin:0 -16px -16px -16px}.mat-card-actions .mat-button,.mat-card-actions .mat-raised-button,.mat-card-actions .mat-stroked-button{margin:0 8px}.mat-card-header{display:flex;flex-direction:row}.mat-card-header .mat-card-title{margin-bottom:12px}.mat-card-header-text{margin:0 16px}.mat-card-avatar{height:40px;width:40px;border-radius:50%;flex-shrink:0;object-fit:cover}.mat-card-title-group{display:flex;justify-content:space-between}.mat-card-sm-image{width:80px;height:80px}.mat-card-md-image{width:112px;height:112px}.mat-card-lg-image{width:152px;height:152px}.mat-card-xl-image{width:240px;height:240px;margin:-8px}.mat-card-title-group>.mat-card-xl-image{margin:-8px 0 8px}@media (max-width:599px){.mat-card-title-group{margin:0}.mat-card-xl-image{margin-left:0;margin-right:0}}.mat-card-content>:first-child,.mat-card>:first-child{margin-top:0}.mat-card-content>:last-child:not(.mat-card-footer),.mat-card>:last-child:not(.mat-card-footer){margin-bottom:0}.mat-card-image:first-child{margin-top:-16px;border-top-left-radius:inherit;border-top-right-radius:inherit}.mat-card>.mat-card-actions:last-child{margin-bottom:-8px;padding-bottom:0}.mat-card-actions .mat-button:first-child,.mat-card-actions .mat-raised-button:first-child,.mat-card-actions .mat-stroked-button:first-child{margin-left:0;margin-right:0}.mat-card-subtitle:not(:first-child),.mat-card-title:not(:first-child){margin-top:-4px}.mat-card-header .mat-card-subtitle:not(:first-child){margin-top:-8px}.mat-card>.mat-card-xl-image:first-child{margin-top:-8px}.mat-card>.mat-card-xl-image:last-child{margin-bottom:-8px}\"], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatCard.ctorParameters = () => [\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatCard, [{\n        type: Component,\n        args: [{ selector: 'mat-card',\n                exportAs: 'matCard',\n                template: \"<ng-content></ng-content><ng-content select=\\\"mat-card-footer\\\"></ng-content>\",\n                styles: [\".mat-card{transition:box-shadow 280ms cubic-bezier(.4,0,.2,1);display:block;position:relative;padding:16px;border-radius:4px}._mat-animation-noopable.mat-card{transition:none;animation:none}.mat-card .mat-divider-horizontal{position:absolute;left:0;width:100%}[dir=rtl] .mat-card .mat-divider-horizontal{left:auto;right:0}.mat-card .mat-divider-horizontal.mat-divider-inset{position:static;margin:0}[dir=rtl] .mat-card .mat-divider-horizontal.mat-divider-inset{margin-right:0}@media (-ms-high-contrast:active){.mat-card{outline:solid 1px}}.mat-card-actions,.mat-card-content,.mat-card-subtitle{display:block;margin-bottom:16px}.mat-card-title{display:block;margin-bottom:8px}.mat-card-actions{margin-left:-8px;margin-right:-8px;padding:8px 0}.mat-card-actions-align-end{display:flex;justify-content:flex-end}.mat-card-image{width:calc(100% + 32px);margin:0 -16px 16px -16px}.mat-card-footer{display:block;margin:0 -16px -16px -16px}.mat-card-actions .mat-button,.mat-card-actions .mat-raised-button,.mat-card-actions .mat-stroked-button{margin:0 8px}.mat-card-header{display:flex;flex-direction:row}.mat-card-header .mat-card-title{margin-bottom:12px}.mat-card-header-text{margin:0 16px}.mat-card-avatar{height:40px;width:40px;border-radius:50%;flex-shrink:0;object-fit:cover}.mat-card-title-group{display:flex;justify-content:space-between}.mat-card-sm-image{width:80px;height:80px}.mat-card-md-image{width:112px;height:112px}.mat-card-lg-image{width:152px;height:152px}.mat-card-xl-image{width:240px;height:240px;margin:-8px}.mat-card-title-group>.mat-card-xl-image{margin:-8px 0 8px}@media (max-width:599px){.mat-card-title-group{margin:0}.mat-card-xl-image{margin-left:0;margin-right:0}}.mat-card-content>:first-child,.mat-card>:first-child{margin-top:0}.mat-card-content>:last-child:not(.mat-card-footer),.mat-card>:last-child:not(.mat-card-footer){margin-bottom:0}.mat-card-image:first-child{margin-top:-16px;border-top-left-radius:inherit;border-top-right-radius:inherit}.mat-card>.mat-card-actions:last-child{margin-bottom:-8px;padding-bottom:0}.mat-card-actions .mat-button:first-child,.mat-card-actions .mat-raised-button:first-child,.mat-card-actions .mat-stroked-button:first-child{margin-left:0;margin-right:0}.mat-card-subtitle:not(:first-child),.mat-card-title:not(:first-child){margin-top:-4px}.mat-card-header .mat-card-subtitle:not(:first-child){margin-top:-8px}.mat-card>.mat-card-xl-image:first-child{margin-top:-8px}.mat-card>.mat-card-xl-image:last-child{margin-bottom:-8px}\"],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: {\n                    'class': 'mat-card',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"'\n                } }]\n    }], function () { return [{ type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, null); })();\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * \\@docs-private\n */\nclass MatCardHeader {\n}\nMatCardHeader.ɵfac = function MatCardHeader_Factory(t) { return new (t || MatCardHeader)(); };\nMatCardHeader.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatCardHeader, selectors: [[\"mat-card-header\"]], hostAttrs: [1, \"mat-card-header\"], ngContentSelectors: _c3, decls: 4, vars: 0, consts: [[1, \"mat-card-header-text\"]], template: function MatCardHeader_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c2);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 0);\n        ɵngcc0.ɵɵprojection(2, 1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(3, 2);\n    } }, encapsulation: 2, changeDetection: 0 });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatCardHeader, [{\n        type: Component,\n        args: [{ selector: 'mat-card-header',\n                template: \"<ng-content select=\\\"[mat-card-avatar], [matCardAvatar]\\\"></ng-content><div class=\\\"mat-card-header-text\\\"><ng-content select=\\\"mat-card-title, mat-card-subtitle, [mat-card-title], [mat-card-subtitle], [matCardTitle], [matCardSubtitle]\\\"></ng-content></div><ng-content></ng-content>\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: { 'class': 'mat-card-header' } }]\n    }], null, null); })();\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * \\@docs-private\n */\nclass MatCardTitleGroup {\n}\nMatCardTitleGroup.ɵfac = function MatCardTitleGroup_Factory(t) { return new (t || MatCardTitleGroup)(); };\nMatCardTitleGroup.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatCardTitleGroup, selectors: [[\"mat-card-title-group\"]], hostAttrs: [1, \"mat-card-title-group\"], ngContentSelectors: _c5, decls: 4, vars: 0, template: function MatCardTitleGroup_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c4);\n        ɵngcc0.ɵɵelementStart(0, \"div\");\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(2, 1);\n        ɵngcc0.ɵɵprojection(3, 2);\n    } }, encapsulation: 2, changeDetection: 0 });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatCardTitleGroup, [{\n        type: Component,\n        args: [{ selector: 'mat-card-title-group',\n                template: \"<div><ng-content select=\\\"mat-card-title, mat-card-subtitle, [mat-card-title], [mat-card-subtitle], [matCardTitle], [matCardSubtitle]\\\"></ng-content></div><ng-content select=\\\"img\\\"></ng-content><ng-content></ng-content>\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: { 'class': 'mat-card-title-group' } }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatCardModule {\n}\nMatCardModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatCardModule });\nMatCardModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatCardModule_Factory(t) { return new (t || MatCardModule)(); }, imports: [[MatCommonModule], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatCardModule, { declarations: function () { return [MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle, MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage, MatCardXlImage, MatCardAvatar]; }, imports: function () { return [MatCommonModule]; }, exports: function () { return [MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle, MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage, MatCardXlImage, MatCardAvatar, MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatCardModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule],\n                exports: [\n                    MatCard,\n                    MatCardHeader,\n                    MatCardTitleGroup,\n                    MatCardContent,\n                    MatCardTitle,\n                    MatCardSubtitle,\n                    MatCardActions,\n                    MatCardFooter,\n                    MatCardSmImage,\n                    MatCardMdImage,\n                    MatCardLgImage,\n                    MatCardImage,\n                    MatCardXlImage,\n                    MatCardAvatar,\n                    MatCommonModule,\n                ],\n                declarations: [\n                    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n                    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n                    MatCardXlImage, MatCardAvatar,\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatCardContent, MatCardTitle, MatCardSubtitle, MatCardActions, MatCardFooter, MatCardImage, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardXlImage, MatCardAvatar, MatCard, MatCardHeader, MatCardTitleGroup, MatCardModule };\n\n//# sourceMappingURL=card.js.map","import { Component, Input } from '@angular/core';\nimport { Product } from 'domain-entities';\n\n@Component({\n\tselector: 'app-storage-option-card',\n\ttemplateUrl: './storage-option-card.component.html',\n\tstyleUrls: ['./storage-option-card.component.scss'],\n})\nexport class StorageOptionCardComponent {\n\n\t@Input() product: Product;\n\n}\n","<mat-card class=\"mt-3 mat-elevation-z0\">\n\t<div class=\"w-100 d-flex justify-content-center icon-container\">\n\t\t<img [src]=\"'assets/images/icons/storage/' + product.shortName + '-storage.svg'\"/>\n\t</div>\n\t<div class=\"d-flex flex-column align-items-center w-100 montserrat-text-light\">\n\t\t<span class=\"font-weight-bold text-size-3 mt-3\">{{ product.shortName }}</span>\n\t\t<span\n\t\t\tclass=\"font-weight-bold text-size-3 primary-color-text mt-2\">{{ 'storageUpgrade.size.' + product.shortName | translate }}</span>\n\t\t<span class=\"grey font-weight-bold text-size-2 mt-4\">{{ product.plans[0].costPerUser['EUR'] }}€</span>\n\t\t<span class=\"grey text-size-0 mt-1\">{{ 'storageUpgrade.perYear' | translate }}</span>\n\t\t<span\n\t\t\tclass=\"text-size-1 font-weight-bold primary-color-text mt-3\">{{ 'storageUpgrade.comingSoon' | translate | uppercase }}</span>\n\t</div>\n</mat-card>\n","<div (click)=\"close()\" class=\"pointer d-flex justify-content-start align-items-center\">\n\t<mat-icon>close</mat-icon>\n\t<span class=\"montserrat-text ml-1 hint\">{{ 'storageUpgrade.cancel' | translate  }}</span>\n</div>\n<div class=\"container card-container\">\n\t<div class=\"row\">\n\t\t<div *ngFor=\"let product of (storageUpgradeProducts$ | async)\" class=\"col-4\">\n\t\t\t<app-storage-option-card [product]=\"product\"></app-storage-option-card>\n\t\t</div>\n\t</div>\n\t<div class=\"row mt-3\">\n\t\t<div class=\"w-100 d-flex justify-content-center\">\n\t\t\t<span class=\"montserrat-text-light\">{{ 'storageUpgrade.hint' | translate  }}</span>\n\t\t</div>\n\t</div>\n</div>\n","import { Component } from '@angular/core';\nimport { AppState } from '../../../../store/state/app.state';\nimport { Store } from '@ngrx/store';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { map } from 'rxjs/operators';\nimport { selectProductsTypeStorageUpgrade } from '../store/selectors/products.selectors';\nimport { Observable } from 'rxjs';\nimport { Product } from 'domain-entities';\n\n@Component({\n\tselector: 'app-storage-options-dialog',\n\ttemplateUrl: './storage-options-dialog.component.html',\n\tstyleUrls: ['./storage-options-dialog.component.scss'],\n})\nexport class StorageOptionsDialogComponent {\n\n\tstorageUpgradeProducts$: Observable<Product[]>;\n\n\tconstructor(\n\t\tprivate readonly store: Store<AppState>,\n\t\tprivate readonly dialogRef: MatDialogRef<StorageOptionsDialogComponent>,\n\t) {\n\t\tthis.initProducts();\n\t}\n\n\tclose(): void {\n\t\tthis.dialogRef.close();\n\t}\n\n\tprivate initProducts(): void {\n\t\tthis.storageUpgradeProducts$ =\n\t\t\tthis.store.select(selectProductsTypeStorageUpgrade).pipe(\n\t\t\t\tmap(products => {\n\t\t\t\t\tconst prods = [...products];\n\t\t\t\t\tprods.sort((a, b) => a.grade - b.grade);\n\t\t\t\t\treturn prods;\n\t\t\t\t}));\n\t}\n}\n","<div class=\"wiz-card mt-2 p-2 pr-4\">\n\t<mat-radio-group\n\t\taria-labelledby=\"example-radio-group-label\"\n\t\tclass=\"example-radio-group\" [(ngModel)]=\"selectedPaymentInterval\">\n\t\t<div class=\"d-flex flex-column align-items-start p-4\">\n\t\t\t<div class=\"pb-2\">\n\t\t\t\t<mat-radio-button color=\"primary\" [value]=\"PlanPaymentInterval.YEARLY\">\n\t\t\t\t\t{{ 'subscription.billingPeriod.yearly.title' | translate}}\n\t\t\t\t</mat-radio-button>\n\t\t\t</div>\n\t\t\t<div class=\"pb-2\">\n\t\t\t\t<mat-radio-button color=\"primary\" [value]=\"PlanPaymentInterval.MONTHLY\">\n\t\t\t\t\t{{ 'subscription.billingPeriod.monthly.title' | translate}}\n\t\t\t\t</mat-radio-button>\n\t\t\t</div>\n\t\t\t<div>{{costText}}</div>\n\t\t\t<div>{{changeDateText}}</div>\n\t\t</div>\n\t</mat-radio-group>\n\t<app-confirm-button (confirmed)=\"onConfirm()\" [locked]=\"locked\"></app-confirm-button>\n</div>\n<ng-template #spinner>\n\t<div>\n\t\t<mat-spinner [diameter]=\"26\"></mat-spinner>\n\t</div>\n</ng-template>\n","import { Component, Input } from '@angular/core';\nimport { PlanPaymentInterval } from 'domain-entities';\nimport { ProductChangeService } from '../../products/product-change.service';\nimport { PaymentIntervalChange } from '../../products/product-confirm/model/ProductChange';\nimport { SubscriptionChangeStatus } from '../../products/model/SubscriptionChangeStatus';\nimport { TranslateService } from '@ngx-translate/core';\nimport { SubscriptionChangeWithExistingSubscription } from '../../products/model/SubscriptionChange';\nimport { SubscriptionChangeTranslationService } from '../subscription-change-translation.service';\nimport { getCostForSubscriptionChange, getVatRateForCountry } from '../../products/shared/shared.functions';\nimport { TrackingDispatcherService } from '../../../../../shared/tracking/tracking-dispatcher.service';\nimport { TrackEventType } from '../../../../../shared/models/track-event.type';\nimport { SubscriptionChangeDirection } from '../../products/model/SubscriptionChangeDirection';\nimport moment from 'moment';\n\n@Component({\n\tselector: 'app-manage-payment-interval',\n\ttemplateUrl: './manage-payment-interval.component.html',\n\tstyleUrls: ['./manage-payment-interval.component.scss'],\n})\nexport class ManagePaymentIntervalComponent {\n\tprivate _selectedPaymentInterval: PlanPaymentInterval = PlanPaymentInterval.MONTHLY;\n\n\t@Input() set currentlySubscribedInterval(currentlySubscribedInterval: PlanPaymentInterval) {\n\t\tthis.selectedPaymentInterval = currentlySubscribedInterval;\n\t}\n\n\tget selectedPaymentInterval(): PlanPaymentInterval {\n\t\treturn this._selectedPaymentInterval;\n\t}\n\n\tlocked = false;\n\tcostText = '';\n\tchangeDateText = '';\n\n\tset selectedPaymentInterval(selectedPaymentInterval: PlanPaymentInterval) {\n\t\tif (this.locked) {\n\t\t\treturn;\n\t\t}\n\t\tthis._selectedPaymentInterval = selectedPaymentInterval;\n\t\tthis.productChangeService.updatePaymentInterval(this.selectedPaymentInterval);\n\t}\n\n\tprivate _paymentIntervalChange: PaymentIntervalChange;\n\t@Input() set paymentIntervalChange(paymentIntervalChange: PaymentIntervalChange) {\n\t\tif (!paymentIntervalChange) {\n\t\t\treturn;\n\t\t}\n\t\tif (paymentIntervalChange.status === SubscriptionChangeStatus.PROCESSING) {\n\t\t\tthis.locked = true;\n\t\t\treturn;\n\t\t}\n\t\tif (paymentIntervalChange.status === SubscriptionChangeStatus.CONFIRMED) {\n\t\t\tthis.locked = false;\n\t\t}\n\t\tthis.costText = this.getChangeText(paymentIntervalChange);\n\t\tthis.changeDateText = this.getChangeDateText(paymentIntervalChange);\n\t\tthis._paymentIntervalChange = paymentIntervalChange;\n\t}\n\n\tconstructor(private readonly translateService: TranslateService,\n\t\t\t\t\t\t\tprivate readonly productChangeService: ProductChangeService,\n\t\t\t\t\t\t\tprivate readonly subscriptionChangeTranslationService: SubscriptionChangeTranslationService,\n\t\t\t\t\t\t\tprivate readonly trackingDispatcherService: TrackingDispatcherService) {\n\t}\n\n\treadonly PlanPaymentInterval = PlanPaymentInterval;\n\n\tgetChangeText(paymentIntervalChange: SubscriptionChangeWithExistingSubscription): string {\n\t\tconst referenceDate = paymentIntervalChange.changeDirection === SubscriptionChangeDirection.DOWNGRADE ? paymentIntervalChange.subscription.renewalDate : moment().unix();\n\t\tconst vatRate = getVatRateForCountry(paymentIntervalChange.billingDetails.billing.address.country, paymentIntervalChange.to.plan, referenceDate);\n\t\tconst cost = getCostForSubscriptionChange(paymentIntervalChange, vatRate);\n\t\treturn this.subscriptionChangeTranslationService.getCostChangeText(paymentIntervalChange, cost, vatRate);\n\t}\n\n\tgetChangeDateText(paymentIntervalChange: SubscriptionChangeWithExistingSubscription): string {\n\t\treturn this.subscriptionChangeTranslationService.getDateChangeText(paymentIntervalChange);\n\t}\n\n\n\tonConfirm(): void {\n\t\tthis.trackingDispatcherService.emitTrackingEvent(TrackEventType.SUBSCRIPTION_OVERVIEW_INTERVAL_CONFIRM);\n\t\tif (this.locked || !this._paymentIntervalChange) {\n\t\t\treturn;\n\t\t}\n\t\tthis.productChangeService.confirmSubscriptionChange(this._paymentIntervalChange);\n\t}\n\n}\n","<div class=\"row justify-content-center h-100 overflow-auto\">\n\t<div class=\"mt-4 col-1\">\n\t\t<div class=\"row justify-content-center\">\n\t\t\t<a class=\"col-2 mt-1\" href=\"#\" routerLink=\"/settings\">\n\t\t\t\t<i class=\"material-icons\">arrow_back</i>\n\t\t\t</a>\n\t\t</div>\n\t</div>\n\t<div class=\"col-10 my-4\">\n\t\t<div class=\"row\" *ngIf=\"overviewData$ | async as overviewData\">\n\t\t\t<div class=\"col-12\">\n\t\t\t\t<div class=\"cf-card\">\n\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t<div class=\"col\">\n\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t<div class=\"col cf-text cf-text-1\">{{ 'subscription.title' | translate }}</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"row align-items-center\">\n\t\t\t\t\t\t\t\t<div class=\"col-auto cf-h1\">{{overviewData.product.name}}</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"row\" *ngIf=\"overviewData.subscription\">\n\t\t\t\t\t\t\t\t<div class=\"col cf-text cf-text-2\">\n\t\t\t\t\t\t\t\t\t{{ getRenewalText(overviewData) }} <span\n\t\t\t\t\t\t\t\t\t*ngIf=\"overviewData.subscription.nextState?.planId !== overviewData.subscription.currentState.planId && !(isTrial$ | async)\"\n\t\t\t\t\t\t\t\t\t(click)=\"undoCancellation(overviewData.subscription)\"\n\t\t\t\t\t\t\t\t\tclass=\"undo-link pointer\">{{ 'subscription.undo' | translate }}</span>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"col-auto\">\n\t\t\t\t\t\t\t<button color=\"primary\" routerLink=\"./products\"\n\t\t\t\t\t\t\t\t\t\t\tmat-flat-button\n\t\t\t\t\t\t\t\t\t\t\t[appTrack]=\"TrackEventType.SUBSCRIPTION_OVERVIEW_AVAILABLE_SUBSCRIPTIONS\">\n\t\t\t\t\t\t\t\t{{ 'subscription.available' | translate }}\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t<ng-template appFeatureFlag=\"feature_company_storage\">\n\t\t\t\t\t\t\t<div class=\"col\">\n\t\t\t\t\t\t\t\t<div *ngIf=\"overviewData.companyLimits\"\n\t\t\t\t\t\t\t\t\t\t class=\"row align-items-end mt-4\">\n\t\t\t\t\t\t\t\t\t<div class=\"col\">\n\t\t\t\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t\t\t\t<div class=\"col-12\">\n\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"col cf-h2\">{{ 'subscription.storage.title' | translate }}</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"col-auto cf-text cf-text-1\">{{\"subscription.usedStorage\" | translate: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tused: getGbString(overviewData.storageData.usedGbs),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tavailable: getGbString(overviewData.storageData.availableGbs)\n\t\t\t\t\t\t\t\t\t\t\t\t\t} }}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t<div class=\"col\">\n\t\t\t\t\t\t\t\t\t\t\t\t<mat-progress-bar\n\t\t\t\t\t\t\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tmode=\"determinate\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t[value]=\"overviewData.storageData.gbPercentage\"\n\t\t\t\t\t\t\t\t\t\t\t\t></mat-progress-bar>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</ng-template>\n\t\t\t\t\t\t<div class=\"col-auto upgrade-storage\">\n\t\t\t\t\t\t\t<div (click)=\"openStorageOptions()\"\n\t\t\t\t\t\t\t\t\t class=\"d-flex mt-1 h-100 align-items-end pointer\">{{ 'subscription.upgradeStorage' | translate }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"row mt-3\" *ngIf=\"overviewData.numberOfUsers && !(isTrial$ | async)\">\n\t\t\t\t\t\t<div class=\"col\">\n\t\t\t\t\t\t\t<div class=\"cf-form-field lg-pad\">\n\t\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t\t<div class=\"col cf-h2\">{{ 'subscription.licensesNumber.title' | translate }}</div>\n\t\t\t\t\t\t\t\t\t<div class=\"col-auto\">\n\t\t\t\t\t\t\t\t\t\t<div class=\"row justify-content-end\">\n\t\t\t\t\t\t\t\t\t\t\t<div class=\"col-auto cf-h2\">{{ overviewData.numberOfUsers }}</div>\n\t\t\t\t\t\t\t\t\t\t\t<div class=\"w-100\"></div>\n\t\t\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t\t\t\tclass=\"col-auto cf-text cf-text-2\">{{ getLicensesChangeText(overviewData.subscription) }}</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<app-manage-company-employees [employeeChanges]=\"employeesChange$ | async\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfromSubscriptionOverview=\"true\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*ngIf=\"editUser\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[subscribedEmployees]=\"overviewData.subscription\"></app-manage-company-employees>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"col-auto pointer pt-2\">\n\t\t\t\t\t\t\t<div class=\"cf-icon-placeholder\" (click)=\"toggleEditUser()\"\n\t\t\t\t\t\t\t\t\t [appTrack]=\"editUser\n\t\t\t\t\t\t\t\t\t\t ? TrackEventType.SUBSCRIPTION_OVERVIEW_LICENSES_CLOSE\n\t\t\t\t\t\t\t\t\t\t : TrackEventType.SUBSCRIPTION_OVERVIEW_LICENSES_OPEN\">\n\t\t\t\t\t\t\t\t<mat-icon *ngIf=\"!editUser\">edit</mat-icon>\n\t\t\t\t\t\t\t\t<mat-icon *ngIf=\"editUser\">close</mat-icon>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<ng-template [ngIf]=\"overviewData.subscription && !(isTrial$ | async)\">\n\t\t\t\t\t\t<div class=\"row mt-3\">\n\t\t\t\t\t\t\t<div class=\"col\">\n\t\t\t\t\t\t\t\t<div class=\"cf-form-field lg-pad\">\n\t\t\t\t\t\t\t\t\t<div class=\"row align-items-center\">\n\t\t\t\t\t\t\t\t\t\t<div class=\"col-auto cf-h2\">\n\t\t\t\t\t\t\t\t\t\t\t<div>{{ 'subscription.billingPeriod.title' | translate }}</div>\n\t\t\t\t\t\t\t\t\t\t\t<div *ngIf=\"overviewData.plan.paymentInterval === PlanPaymentInterval.MONTHLY\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t class=\"cf-text cf-text-2\">{{ 'subscription.billingPeriod.discount' | translate }}</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"col\">\n\t\t\t\t\t\t\t\t\t\t\t<div class=\"row justify-content-end\">\n\t\t\t\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t\t\t\t\tclass=\"col-auto cf-h2\">{{ 'subscription.billingPeriod.' + overviewData.plan.paymentInterval.toLowerCase() + '.title' | translate }}</div>\n\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"w-100\"></div>\n\t\t\t\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t\t\t\t\tclass=\"col-auto cf-text cf-text-2\">{{ getPaymentIntervalChangeText(overviewData.subscription, overviewData.allProducts) }}</div>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<app-manage-payment-interval *ngIf=\"editPaymentInterval\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t [currentlySubscribedInterval]=\"overviewData.plan.paymentInterval\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t [paymentIntervalChange]=\"paymentIntervalChange$ | async\"></app-manage-payment-interval>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"col-auto pt-2\">\n\t\t\t\t\t\t\t\t<div class=\"cf-icon-placeholder pointer\" (click)=\"toggleEditPaymentInterval()\"\n\t\t\t\t\t\t\t\t\t\t [appTrack]=\"editPaymentInterval\n\t\t\t\t\t\t\t\t\t\t ? TrackEventType.SUBSCRIPTION_OVERVIEW_INTERVAL_CLOSE\n\t\t\t\t\t\t\t\t\t\t : TrackEventType.SUBSCRIPTION_OVERVIEW_INTERVAL_OPEN\">\n\t\t\t\t\t\t\t\t\t<mat-icon *ngIf=\"!editPaymentInterval\">edit</mat-icon>\n\t\t\t\t\t\t\t\t\t<mat-icon *ngIf=\"editPaymentInterval\">close</mat-icon>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div *ngIf=\"overviewData.billingDetails\" class=\"row align-items-center mt-3\">\n\t\t\t\t\t\t\t<div class=\"col\">\n\t\t\t\t\t\t\t\t<div class=\"cf-form-field sm-pad\">\n\t\t\t\t\t\t\t\t\t<div class=\"row align-items-center\">\n\t\t\t\t\t\t\t\t\t\t<div class=\"col-auto cf-h2\">\n\t\t\t\t\t\t\t\t\t\t\t<div>{{ 'subscription.cost.title' | translate }}</div>\n\t\t\t\t\t\t\t\t\t\t\t<div class=\"w-50 cf-text cf-text-2\">{{'subscription.cost.vat-hint' | translate}}</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"col\">\n\t\t\t\t\t\t\t\t\t\t\t<div class=\"row justify-content-end\">\n\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"col-auto cf-h2\">{{ overviewData.price }}</div>\n\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"w-100\"></div>\n\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"col-auto cf-text cf-text-2\">{{ overviewData.pricePerUser }}</div>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"col-auto\">\n\t\t\t\t\t\t\t\t<div class=\"cf-icon-placeholder\"></div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</ng-template>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<ng-template [ngIf]=\"overviewData.billingDetails\">\n\t\t\t\t<div class=\"col-12 mt-3\">\n\t\t\t\t\t<div class=\"cf-card\">\n\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t<div class=\"col-auto cf-h2\">{{ 'subscription.billingDetails' | translate }}</div>\n\t\t\t\t\t\t\t<div class=\"col\">\n\t\t\t\t\t\t\t\t<div class=\"row justify-content-end\">\n\t\t\t\t\t\t\t\t\t<div class=\"col-auto cf-text cf-text-1\">{{overviewData.billingDetails?.billing.email}}</div>\n\t\t\t\t\t\t\t\t\t<div class=\"w-100\"></div>\n\t\t\t\t\t\t\t\t\t<div class=\"col-auto cf-text cf-text-1\">{{overviewData.billingDetails?.billing.company}}</div>\n\t\t\t\t\t\t\t\t\t<div class=\"w-100\"></div>\n\t\t\t\t\t\t\t\t\t<div class=\"col-auto cf-text cf-text-1\">{{overviewData.billingDetails?.billing.address.line1}}</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-12 mt-3\">\n\t\t\t\t\t<div class=\"cf-card\">\n\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t<div class=\"col-auto cf-h2\">{{ 'subscription.paymentMethod.title' | translate }}</div>\n\t\t\t\t\t\t\t<div class=\"col\">\n\t\t\t\t\t\t\t\t<div class=\"row justify-content-end\">\n\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t\tclass=\"col-auto cf-text cf-text-1\"\n\t\t\t\t\t\t\t\t\t\t*ngIf=\"overviewData.billingDetails.paymentMethod as paymentMethodType\">{{ 'subscription.paymentMethod.' + paymentMethodType | translate }}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</ng-template>\n\t\t</div>\n\t</div>\n</div>\n\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { CompanyLimit, Plan, PlanPaymentInterval, Product, ProductType, Subscription } from 'domain-entities';\nimport { BehaviorSubject, combineLatest, Observable, Subject } from 'rxjs';\nimport { filter, map, mergeMap, shareReplay, switchMap, takeUntil, tap } from 'rxjs/operators';\nimport { AuthService } from '../../../../shared/firebase/auth.service';\nimport { CompanyService } from '../../../../shared/firebase/company.service';\nimport { BillingDetails, CouponResponse, SubscriptionService } from '../../../../shared/firebase/subscription.service';\nimport { ProfileService } from '../../../../shared/firebase/profile.service';\nimport { Company } from '../../../../shared/models/company.model';\nimport { ProductService } from '../../../../shared/firebase/product.service';\nimport { DecimalPipe } from '@angular/common';\nimport { StorageData } from './model/StorageData';\nimport { OverviewData } from './model/OverviewData';\nimport { PaymentIntervalChange } from '../products/product-confirm/model/ProductChange';\nimport { ProductChangeService } from '../products/product-change.service';\nimport { SubscriptionChangeType } from '../products/model/SubscriptionChangeType';\nimport { EmployeeChange } from '../products/manage-company-employess/model/EmployeeChange';\nimport { SubscriptionChangeTranslationService } from './subscription-change-translation.service';\nimport { SubscriptionChangeStatus } from '../products/model/SubscriptionChangeStatus';\nimport { getCost, getOverallCostPerUser, getVatRateForCountry } from '../products/shared/shared.functions';\nimport { HotjarTrackingService } from '../../../third-party/hotjar-tracking/services/hotjar-tracking.service';\nimport { TrackEventType } from '../../../../shared/models/track-event.type';\nimport { AppState } from '../../../../store/state/app.state';\nimport { Store } from '@ngrx/store';\nimport { selectCompanyLimits } from '../../../../store/selectors/app.selectors';\nimport { MatDialog } from '@angular/material';\nimport { StorageOptionsDialogComponent } from '../storage-options-dialog/storage-options-dialog.component';\nimport { selectProductsTypeSubscriptionAndTrial } from '../store/selectors/products.selectors';\nimport moment from 'moment';\n\nconst ONE_GIGABYTE = 1e9;\n\n@Component({\n\tselector: 'app-subscription',\n\ttemplateUrl: './subscription.component.html',\n\tstyleUrls: ['../../../../account/settings/settings.component.scss', './subscription.component.css'],\n\tproviders: [DecimalPipe],\n})\nexport class SubscriptionComponent implements OnInit, OnDestroy {\n\treadonly PlanPaymentInterval = PlanPaymentInterval;\n\n\tcompany$: Observable<Company>;\n\tcompanyLimits$: Observable<CompanyLimit> = this.store.select(selectCompanyLimits);\n\tsubscription$: Subject<Subscription> = new BehaviorSubject<Subscription>(null);\n\tbillingDetails$: Subject<BillingDetails> = new BehaviorSubject<BillingDetails>(null);\n\tproducts$: Observable<Product[]> = this.store.select(selectProductsTypeSubscriptionAndTrial);\n\toverviewData$: Observable<OverviewData>;\n\tisTrial$: Observable<boolean>;\n\n\n\tpaymentIntervalChange$: Observable<PaymentIntervalChange>;\n\temployeesChange$: Observable<EmployeeChange>;\n\n\teditUser = false;\n\teditPaymentInterval = false;\n\n\tTrackEventType = TrackEventType;\n\n\tprivate onDestroy$ = new Subject();\n\tpublic loading = true;\n\n\tconstructor(\n\t\tprivate subscriptionService: SubscriptionService,\n\t\tprivate companyService: CompanyService,\n\t\tprivate authService: AuthService,\n\t\tprivate profileService: ProfileService,\n\t\tprivate productService: ProductService,\n\t\tprivate productChangeService: ProductChangeService,\n\t\tprivate subscriptionChangeTranslationService: SubscriptionChangeTranslationService,\n\t\tprivate translate: TranslateService,\n\t\tprivate decimalPipe: DecimalPipe,\n\t\tprivate readonly hotjarTrackingService: HotjarTrackingService,\n\t\tprivate readonly dialog: MatDialog,\n\t\tprivate readonly store: Store<AppState>,\n\t) {\n\t}\n\n\tngOnInit(): void {\n\t\tthis.setupCompany();\n\t\tthis.setupSubscription();\n\t\tthis.setupOverviewData();\n\t\tthis.setupBillingDetails();\n\t\tthis.setupPaymentIntervalChange();\n\t\tthis.setupEmployeesChange();\n\t\tthis.setupTrial();\n\t}\n\n\tngOnDestroy(): void {\n\t\tthis.onDestroy$.next();\n\t\tthis.onDestroy$.complete();\n\n\t}\n\n\tsetupCompany(): void {\n\t\tconst profile$ = this.authService.$authState.pipe(\n\t\t\tfilter(user => !!user),\n\t\t\tmergeMap(user => this.profileService.getProfile(user.uid)), shareReplay());\n\t\tthis.company$ = profile$.pipe(\n\t\t\tmergeMap(profile => this.companyService.getCompany(profile.company)),\n\t\t\tshareReplay());\n\t}\n\n\tsetupSubscription(): void {\n\t\tthis.subscriptionService.getActiveSubscription().pipe(takeUntil(this.onDestroy$)).subscribe(subscription => {\n\t\t\tthis.subscription$.next(subscription);\n\t\t});\n\t}\n\n\tsetupBillingDetails(): void {\n\t\tthis.subscriptionService.getActiveSubscriptionAndProduct()\n\t\t\t.pipe(\n\t\t\t\tfilter(([subscription, product]) => subscription && product.type !== ProductType.TRIAL),\n\t\t\t\tswitchMap(([subscription]) => this.subscriptionService.getBillingInformation(subscription.id)),\n\t\t\t\tfilter(billingDetails => !!billingDetails),\n\t\t\t\ttakeUntil(this.onDestroy$),\n\t\t\t).subscribe(billingDetails => this.billingDetails$.next(billingDetails));\n\t}\n\n\tsetupOverviewData(): void {\n\t\tthis.overviewData$ = combineLatest([\n\t\t\tthis.company$,\n\t\t\tthis.subscription$,\n\t\t\tthis.companyLimits$,\n\t\t\tthis.products$,\n\t\t\tthis.billingDetails$],\n\t\t).pipe(switchMap(async params => {\n\t\t\tconst [company, subscription, companyLimits, products, billingDetails] = params;\n\t\t\tconst filteredProducts = products.filter(prod => prod.type === ProductType.SUBSCRIPTION || prod.type === ProductType.TRIAL);\n\t\t\t// The product with the lowest grade is implicitly defined as the Basic (i.e. free tier) product)\n\t\t\tconst product: Product = products.sort((a, b) => a.grade - b.grade)[0];\n\t\t\tconst result: OverviewData = {\n\t\t\t\tcompany,\n\t\t\t\tproduct,\n\t\t\t\tallProducts: products,\n\t\t\t};\n\t\t\tif (companyLimits) {\n\t\t\t\tconst storageData = createStorageData(company, companyLimits);\n\t\t\t\tresult.companyLimits = companyLimits;\n\t\t\t\tresult.storageData = storageData;\n\t\t\t}\n\t\t\tif (subscription) {\n\t\t\t\tconst allPlans: Plan[] = [];\n\t\t\t\tproducts.filter(prod => prod.plans).forEach(prod => allPlans.push(...prod.plans));\n\n\t\t\t\tconst planOfSubscription = allPlans.find(plan => plan.stripeId === subscription.currentState.planId);\n\t\t\t\tconst productOfSubscription = filteredProducts.find(prod => prod.plans.find(plan => plan === planOfSubscription));\n\t\t\t\tconst numberOfUsers = subscription.currentState.quantity;\n\t\t\t\tlet price: string;\n\t\t\t\tlet pricePerUser: string;\n\t\t\t\tif (billingDetails) {\n\t\t\t\t\tconst couponResponse = await this.subscriptionService.getOrLoadCouponResponse(planOfSubscription.stripeId);\n\t\t\t\t\tprice = this.getPrice(numberOfUsers, planOfSubscription, billingDetails, couponResponse, subscription.renewalDate);\n\t\t\t\t\tpricePerUser = this.getPricePerUser(numberOfUsers, planOfSubscription, billingDetails, couponResponse, subscription.renewalDate);\n\t\t\t\t}\n\n\t\t\t\tresult.plan = planOfSubscription;\n\t\t\t\tresult.product = productOfSubscription;\n\t\t\t\tresult.allProducts = products;\n\t\t\t\tresult.price = price;\n\t\t\t\tresult.pricePerUser = pricePerUser;\n\t\t\t\tresult.subscription = subscription;\n\t\t\t\tresult.numberOfUsers = numberOfUsers;\n\t\t\t\tresult.billingDetails = billingDetails;\n\t\t\t}\n\t\t\treturn result;\n\t\t}));\n\t}\n\n\tsetupPaymentIntervalChange(): void {\n\t\tthis.paymentIntervalChange$ = this.productChangeService.getProductChanges().pipe(\n\t\t\tfilter(change => change.changeType === SubscriptionChangeType.PAYMENT_INTERVAL),\n\t\t\tmap(change => change as PaymentIntervalChange), tap(change => {\n\t\t\t\tif (change.status === SubscriptionChangeStatus.CONFIRMED) {\n\t\t\t\t\tthis.editPaymentInterval = false;\n\t\t\t\t}\n\t\t\t}));\n\t}\n\n\tsetupEmployeesChange(): void {\n\t\tthis.employeesChange$ = this.productChangeService.getProductChanges().pipe(\n\t\t\tfilter(change => change.changeType === SubscriptionChangeType.EMPLOYEES_CHANGE),\n\t\t\tmap(change => change as EmployeeChange), tap(change => {\n\t\t\t\tif (change.status === SubscriptionChangeStatus.CONFIRMED) {\n\t\t\t\t\tthis.editUser = false;\n\t\t\t\t}\n\t\t\t}));\n\t}\n\n\tpublic getRenewalText(overviewData: OverviewData): string {\n\t\treturn this.subscriptionChangeTranslationService.getProductChangeText(\n\t\t\toverviewData.product, overviewData.allProducts, overviewData.subscription);\n\t}\n\n\tpublic getPrice(numberOfUsers: number, plan: Plan, billingDetails: BillingDetails, couponResponse: CouponResponse, renewalDate: number): string {\n\t\tconst timeUnit = plan.paymentInterval === PlanPaymentInterval.MONTHLY ? 'months' : 'years';\n\t\tconst dateOfPeriodStart = moment.unix(renewalDate).subtract(1, timeUnit).unix();\n\t\tconst vatRate = getVatRateForCountry(billingDetails.billing.address.country, plan, dateOfPeriodStart);\n\t\tconst cost = getCost(plan, numberOfUsers, vatRate, { response: couponResponse, ignoreValid: true });\n\t\tconst type = plan.paymentInterval.toLowerCase();\n\t\tconst costText = this.subscriptionChangeTranslationService.getCurrencyCostText(cost);\n\t\treturn this.translate.instant(`subscription.cost.${type}`, { cost: costText });\n\t}\n\n\tpublic getPricePerUser(numberOfUsers: number, plan: Plan, billingDetails: BillingDetails, couponResponse: CouponResponse, renewalDate: number): string {\n\t\tconst type = plan.paymentInterval.toLowerCase();\n\t\tconst timeUnit = plan.paymentInterval === PlanPaymentInterval.MONTHLY ? 'months' : 'years';\n\t\tconst dateOfPeriodStart = moment.unix(renewalDate).subtract(1, timeUnit).unix();\n\t\tconst vatRate = getVatRateForCountry(billingDetails.billing.address.country, plan, dateOfPeriodStart);\n\t\tconst cost = getCost(plan, numberOfUsers, vatRate, { response: couponResponse, ignoreValid: true });\n\t\tconst overallCostPerUser = getOverallCostPerUser(cost, numberOfUsers);\n\t\tconst costText = this.subscriptionChangeTranslationService.getCurrencyCostText(overallCostPerUser);\n\t\treturn this.translate.instant(`subscription.cost.perUser.${type}`, { cost: costText });\n\t}\n\n\tpublic getGbString(usedGBytes: number): string {\n\t\treturn this.decimalPipe.transform(usedGBytes, '1.2-2');\n\t}\n\n\tpublic getPaymentIntervalChangeText(subscription: Subscription, products: Product[]): string {\n\t\treturn this.subscriptionChangeTranslationService.getPaymentIntervalChangeText(subscription, products);\n\t}\n\n\tpublic getLicensesChangeText(subscription: Subscription): string {\n\t\treturn this.subscriptionChangeTranslationService.getLicensesChangeText(subscription);\n\t}\n\n\n\ttoggleEditUser(): void {\n\t\tthis.editUser = !this.editUser;\n\t}\n\n\ttoggleEditPaymentInterval(): void {\n\t\tthis.editPaymentInterval = !this.editPaymentInterval;\n\t}\n\n\tundoCancellation(subscription: Subscription): void {\n\t\tthis.subscriptionService.undoPlanChange(subscription);\n\t}\n\n\tsetupTrial(): void {\n\t\tthis.isTrial$ = this.overviewData$.pipe(map(data => data.product.type === ProductType.TRIAL));\n\t}\n\n\topenStorageOptions(): void {\n\t\tthis.dialog.open(StorageOptionsDialogComponent, { width: '1190px', panelClass: 'storage-upgrade-dialog' });\n\t}\n\n}\n\nconst createStorageData: (company: Company, companyLimit: CompanyLimit) => StorageData =\n\t(company: Company, companyLimit: CompanyLimit): StorageData => {\n\t\tconst availableGbs = companyLimit.storageGBytes || 0;\n\t\tconst usedGbs = (company.storageBytes || 0) / ONE_GIGABYTE;\n\t\tconst gbPercentage = (usedGbs / availableGbs) * 100;\n\t\treturn { availableGbs, usedGbs, gbPercentage };\n\t};\n","<div class=\"outer-wrapper d-flex flex-column align-items-center\">\n\t<div class=\"wrapper\">\n\t\t<div class=\"row\">\n\t\t\t<div\n\t\t\t\t*ngFor=\"let item of items; let i = index\"\n\t\t\t\tclass=\"col option\"\n\t\t\t\t[class.option-selected]=\"selectedToggleIndex === i\"\n\t\t\t\t[class.option-unselected]=\"selectedToggleIndex !== i\"\n\t\t\t\t(click)=\"itemSelected(i)\"\n\t\t\t>\n\t\t\t\t{{ item.translateKey | translate }}\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<div class=\"pt-2 note\">\n\t\t{{ 'subscription.billingPeriod.twoFreeMonthNote' | translate }}\n\t</div>\n</div>\n\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n@Component({\n\tselector: 'app-toggle',\n\ttemplateUrl: './toggle.component.html',\n\tstyleUrls: ['./toggle.component.css'],\n})\nexport class ToggleComponent {\n\t@Input() items: ToggleItem[];\n\t@Input() selectedToggleIndex: number;\n\t@Output() selected = new EventEmitter<number>();\n\n\tpublic itemSelected(index: number): void {\n\t\tthis.selected.emit(index);\n\t}\n}\n\nexport interface ToggleItem {\n\ttranslateKey: string;\n\tnote?: string;\n}\n","<script src=\"../manage-company-employess/manage-company-employees.component.ts\"></script>\n<div *ngIf=\"productChangeType !== SubscriptionChangeDirection.UNCHANGED\" class=\"row justify-content-center mb-2\">\n\t<div class=\"col-auto\">\n\t\t<button (click)=\"onClick()\" color=\"primary\" mat-flat-button>\n\t\t\t<ng-container *ngIf=\"productChangeType === SubscriptionChangeDirection.DOWNGRADE; then donwgrade\"></ng-container>\n\t\t\t<ng-container *ngIf=\"productChangeType === SubscriptionChangeDirection.UPGRADE; then upgrade\"></ng-container>\n\t\t</button>\n\t</div>\n</div>\n\n<ng-template #donwgrade>\n\t{{ 'subscription.plans.downgrade.title' | translate }}\n</ng-template>\n\n<ng-template #upgrade>\n\t{{ 'subscription.plans.upgrade.title' | translate }}\n</ng-template>\n","import { Component, Input, OnChanges } from '@angular/core';\nimport { getChangeDirectionWithUnchanged, getLowestGradeProduct } from '../shared/shared.functions';\nimport { SubscriptionChangeDirection } from '../model/SubscriptionChangeDirection';\nimport { ProductChangeService } from '../product-change.service';\nimport { Product } from 'domain-entities';\n\n\n@Component({\n\tselector: 'app-product-change',\n\ttemplateUrl: './product-change.component.html',\n\tstyleUrls: ['./product-change.component.css', '../products.component.scss'],\n})\nexport class ProductChangeComponent implements OnChanges {\n\t@Input() currentProductGrade: number;\n\t@Input() scheduledProductGrade: number;\n\n\t@Input() allProducts: Product[] = [];\n\n\t_gradeOfCard: number;\n\t@Input() set gradeOfCard(grade) {\n\t\tthis._gradeOfCard = parseInt(grade, 10);\n\t}\n\n\tSubscriptionChangeDirection = SubscriptionChangeDirection;\n\tproductChangeType: number;\n\n\tconstructor(private readonly productChangeService: ProductChangeService) {\n\t}\n\n\tngOnChanges(): void {\n\t\tthis.setChangeType();\n\t}\n\n\tsetChangeType(): void {\n\t\tlet changeDirection = getChangeDirectionWithUnchanged(this.currentProductGrade, this._gradeOfCard);\n\t\tif (changeDirection === SubscriptionChangeDirection.UPGRADE) {\n\t\t\tconst freeTierProductGrade = getLowestGradeProduct(this.allProducts).grade;\n\t\t\t// An upgrade can not be performed to the lowest tier, even if no subscription\n\t\t\t// exists yet\n\t\t\tif (this._gradeOfCard === freeTierProductGrade) {\n\t\t\t\tthis.productChangeType = SubscriptionChangeDirection.UNCHANGED;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.productChangeType = SubscriptionChangeDirection.UPGRADE;\n\t\t\treturn;\n\t\t}\n\n\t\tif (changeDirection === SubscriptionChangeDirection.DOWNGRADE) {\n\t\t\t// If the subscription has been cancelled no further downgrades can be scheduled\n\t\t\tif (!this.scheduledProductGrade) {\n\t\t\t\tthis.productChangeType = SubscriptionChangeDirection.UNCHANGED;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tchangeDirection = getChangeDirectionWithUnchanged(this.scheduledProductGrade, this._gradeOfCard);\n\t\t}\n\t\tthis.productChangeType = changeDirection;\n\t}\n\n\tonClick() {\n\t\tthis.productChangeService.scheduleProductChange(this._gradeOfCard);\n\t}\n}\n","<div class=\"px-2\">\n\t<div [ngClass]=\"{'cf-card': true, 'suggested': productState.currentProduct.grade === gradeOfCard -1}\">\n\t\t<div class=\"corner-info d-flex flex-column align-items-center montserrat-text-light justify-content-end\">\n\t\t\t<ng-content select=\"div.corner-content\"></ng-content>\n\t\t</div>\n\t\t<ng-template [ngIf]=\"productState.currentProduct.grade === gradeOfCard\"\n\t\t\t\t\t\t\t\t [ngIfThen]=\"currentProduct\"></ng-template>\n\t\t<div class=\"h-100 d-flex flex-column justify-content-end align-items-center\">\n\t\t\t<ng-content></ng-content>\n\t\t\t<div class=\"product-change\">\n\t\t\t\t<app-product-change\n\t\t\t\t\t*ngIf=\"productState\"\n\t\t\t\t\t[gradeOfCard]=\"gradeOfCard\"\n\t\t\t\t\t[currentProductGrade]=\"productState.currentProduct.grade\"\n\t\t\t\t\t[scheduledProductGrade]=\"productState.nextProduct?.grade\"\n\t\t\t\t\t[allProducts]=\"productState.allProducts\"></app-product-change>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n<ng-template #currentProduct>\n\t<div class=\"active-subscription\">\n\t\t<div\n\t\t\tclass=\"montserrat-text-light cf-text cf-text-1 text-center\">{{ 'subscription.plans.selected' | translate }}</div>\n\t</div>\n</ng-template>\n","import { Component, Input } from '@angular/core';\nimport { ProductState } from '../model/ProductState';\n\n@Component({\n\tselector: 'app-product-card',\n\ttemplateUrl: './product-card.component.html',\n\tstyleUrls: ['./product-card.component.scss'],\n})\nexport class ProductCardComponent {\n\t@Input() productState: ProductState;\n\t_gradeOfCard: number;\n\n\t@Input() set gradeOfCard(grade: any) {\n\t\tthis._gradeOfCard = parseInt(grade, 10);\n\t}\n\n\tget gradeOfCard() {\n\t\treturn this._gradeOfCard;\n\t}\n\n\tconstructor() {\n\t}\n}\n","<div class=\"cf-change-confirmation p-3 cf-card\" *ngIf=\"changeText\">\n\t<div class=\"d-flex flex-column align-items-center\">\n\t\t<div class=\"cf-text cf-text-2 my-2\">\n\t\t\t<div>{{changeText.questionPartOne}} <span\n\t\t\t\tclass=\"font-weight-bold\">{{productChange.from.product.name}}</span> {{changeText.questionPartTwo}} <span\n\t\t\t\tclass=\"font-weight-bold\">{{productChange.to.product.name}}</span> {{changeText.questionPartThree}}</div>\n\t\t</div>\n\t\t<div class=\"cf-text cf-text-2 my-2\">\n\t\t\t{{changeText.costText}}</div>\n\t\t<div *ngIf=\"changeText.dateText\" class=\"cf-text cf-text-2\">\n\t\t\t{{changeText.dateText}}</div>\n\t\t<div class=\"d-flex justify-content-center mt-4\">\n\t\t\t<button (click)=\"onConfirm()\" color=\"primary\"\n\t\t\t\t\t\t\tmat-flat-button>\n\t\t\t\t<div class=\"d-flex justify-content-center\">\n\t\t\t\t\t<ng-template [ngIf]=\"!locked\" [ngIfElse]=\"spinner\">\n\t\t\t\t\t\t{{ 'subscription.change.confirm' | translate }}\n\t\t\t\t\t</ng-template>\n\t\t\t\t</div>\n\t\t\t</button>\n\t\t</div>\n\t</div>\n</div>\n<ng-template #spinner>\n\t<div>\n\t\t<mat-spinner [diameter]=\"26\"></mat-spinner>\n\t</div>\n</ng-template>\n","import { Component, Inject, Input, LOCALE_ID } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { DateService } from '../../../../../shared/helper/date.service';\nimport { ProductChange } from './model/ProductChange';\nimport { ProductChangeService } from '../product-change.service';\nimport { SubscriptionChangeType } from '../model/SubscriptionChangeType';\nimport { SubscriptionChangeStatus } from '../model/SubscriptionChangeStatus';\nimport { SubscriptionChangeTranslationService } from '../../subscription/subscription-change-translation.service';\nimport { getCostForSubscriptionChange, getVatRateForCountry } from '../shared/shared.functions';\nimport { TrackingDispatcherService } from '../../../../../shared/tracking/tracking-dispatcher.service';\nimport { SubscriptionChangeDirection } from '../model/SubscriptionChangeDirection';\nimport { TrackEventType } from '../../../../../shared/models/track-event.type';\nimport moment from 'moment';\n\ninterface ChangeText {\n\tquestionPartOne: string;\n\tquestionPartTwo: string;\n\tquestionPartThree: string;\n\n\tdateText?: string;\n\tcostText: string;\n}\n\n@Component({\n\tselector: 'app-product-confirm',\n\ttemplateUrl: './product-confirm.component.html',\n\tstyleUrls: ['./product-confirm.component.scss', '../products.component.scss', '../../../../../account/settings/settings.component.scss'],\n})\nexport class ProductConfirmComponent {\n\n\tchangeText: ChangeText;\n\tprivate _productChange: ProductChange;\n\n\t@Input() set productChange(productChange: ProductChange) {\n\t\tif (!productChange || productChange.changeType !== SubscriptionChangeType.PRODUCT_CHANGE) {\n\t\t\treturn;\n\t\t}\n\t\tif (productChange.status === SubscriptionChangeStatus.CONFIRMED) {\n\t\t\tthis.changeText = null;\n\t\t\tthis.locked = false;\n\t\t\treturn;\n\t\t} else if (productChange.status === SubscriptionChangeStatus.PROCESSING) {\n\t\t\t// ignore new change requests if an existing request is processing\n\t\t\tthis.locked = true;\n\t\t\tthis.trackProductChange(productChange);\n\t\t\treturn;\n\t\t}\n\t\tthis._productChange = productChange;\n\t\tthis.trackProductChange(productChange);\n\t\tthis.setChangeText();\n\t}\n\n\tget productChange(): ProductChange {\n\t\treturn this._productChange;\n\t}\n\n\tlocked = false;\n\n\tconstructor(\n\t\tprivate readonly dateService: DateService,\n\t\tprivate readonly translateService: TranslateService,\n\t\tprivate readonly productChangeService: ProductChangeService,\n\t\tprivate readonly subscriptionChangeTranslationService: SubscriptionChangeTranslationService,\n\t\tprivate readonly trackingDispatcherService: TrackingDispatcherService,\n\t\t@Inject(LOCALE_ID) private readonly  localeId) {\n\t}\n\n\tprivate setChangeText(): void {\n\t\tconst questionPartOne = this.translateService.instant('subscription.change.questionPartOne');\n\t\tconst questionPartTwo = this.translateService.instant('subscription.change.questionPartTwo');\n\t\tconst questionPartThree = this.translateService.instant('subscription.change.questionPartThree');\n\t\tconst referenceDate = this.productChange.changeDirection === SubscriptionChangeDirection.DOWNGRADE ? this.productChange.subscription.renewalDate : moment().unix();\n\t\tconst vatRate = getVatRateForCountry(this.productChange.billingDetails.billing.address.country, this.productChange.to.plan, referenceDate);\n\t\tconst cost = getCostForSubscriptionChange(this.productChange, vatRate);\n\t\tconst costText = this.subscriptionChangeTranslationService.getCostChangeText(this.productChange, cost, vatRate);\n\t\tconst dateText = this.subscriptionChangeTranslationService.getDateChangeText(this.productChange);\n\n\t\tconst text = {\n\t\t\tquestionPartOne,\n\t\t\tquestionPartTwo,\n\t\t\tquestionPartThree,\n\t\t\tcostText,\n\t\t\tdateText,\n\t\t};\n\t\tthis.changeText = text;\n\t}\n\n\tonConfirm(): void {\n\t\tthis.productChangeService.confirmSubscriptionChange(this.productChange);\n\t}\n\n\tprivate trackProductChange(productChange: ProductChange): void {\n\t\tconst newProduct = productChange.to.product;\n\t\tconst changeDirection = productChange.changeDirection;\n\t\tconst confirmed = productChange.status === SubscriptionChangeStatus.PROCESSING;\n\t\tlet event: TrackEventType;\n\t\tif (confirmed && changeDirection === SubscriptionChangeDirection.UPGRADE) {\n\t\t\tevent = TrackEventType.SUBSCRIPTION_PRODUCTS_UPGRADE_CONFIRM;\n\t\t} else if (!confirmed && changeDirection === SubscriptionChangeDirection.UPGRADE) {\n\t\t\tevent = TrackEventType.SUBSCRIPTION_PRODUCTS_UPGRADE_OPEN;\n\t\t} else if (confirmed && changeDirection === SubscriptionChangeDirection.DOWNGRADE) {\n\t\t\tevent = TrackEventType.SUBSCRIPTION_PRODUCTS_DOWNGRADE_CONFIRM;\n\t\t} else if (!confirmed && changeDirection === SubscriptionChangeDirection.DOWNGRADE) {\n\t\t\tevent = TrackEventType.SUBSCRIPTION_PRODUCTS_DOWNGRADE_OPEN;\n\t\t}\n\t\tif (!event) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet product: string;\n\t\tif (newProduct.grade === 0) {\n\t\t\tproduct = 'basic';\n\t\t} else if (newProduct.grade === 1) {\n\t\t\tproduct = 'pro';\n\t\t} else if (newProduct.grade === 2) {\n\t\t\tproduct = 'premium';\n\t\t}\n\t\tif (!product) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.trackingDispatcherService.emitTrackingEvent(event, { type: product });\n\t}\n}\n","<div class=\"d-flex flex-column justify-content-between products-wrapper\">\n\t<div>\n\t\t<div class=\"toggle-container\">\n\t\t\t<div *ngIf=\"!(subscription$ | async)\" class=\"row justify-content-center py-4\">\n\t\t\t\t<div class=\"col-auto\">\n\t\t\t\t\t<app-toggle (selected)=\"itemSelected($event)\" [items]=\"items\"\n\t\t\t\t\t\t\t\t\t\t\t[selectedToggleIndex]=\"selectedToggleIndex\"></app-toggle>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div *ngIf=\"productState$ | async as productState\" class=\"cf-cards-container\">\n\t\t\t<div class=\"container\">\n\t\t\t\t<div class=\"row justify-content-center\">\n\t\t\t\t\t<div class=\"col-4\">\n\t\t\t\t\t\t<app-product-card gradeOfCard=\"0\" [productState]=\"productState\">\n\t\t\t\t\t\t\t<div class=\"corner-content font-weight-bold\">5 GB</div>\n\t\t\t\t\t\t\t<div class=\"corner-content\">{{'subscription.storage.perCompany' | translate }}</div>\n\t\t\t\t\t\t\t<div class=\"row justify-content-center mt-5\">\n\t\t\t\t\t\t\t\t<div class=\"col-auto cf-h1\">{{ 'subscription.plans.basic.title' | translate }}</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"row justify-content-center\">\n\t\t\t\t\t\t\t\t<div class=\"col-auto cf-text\">{{ 'subscription.plans.basic.costs' | translate }}</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"row justify-content-center my-5\">\n\t\t\t\t\t\t\t\t<div *ngFor=\"let i of [0, 1, 2]\"\n\t\t\t\t\t\t\t\t\t\t class=\"col-12 text-center cf-text cf-text-1\">{{ 'subscription.plans.basic.features.' + i | translate }}</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</app-product-card>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-4\">\n\t\t\t\t\t\t<app-product-card gradeOfCard=\"1\" [productState]=\"productState\">\n\t\t\t\t\t\t\t<div class=\"corner-content font-weight-bold\">10 GB</div>\n\t\t\t\t\t\t\t<div class=\"corner-content\">{{'subscription.storage.perUser' | translate }}</div>\n\t\t\t\t\t\t\t<div class=\"row justify-content-center mt-5\">\n\t\t\t\t\t\t\t\t<div class=\"col-auto cf-h1\">{{ 'subscription.plans.pro.title' | translate }}</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"row justify-content-center\">\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tclass=\"col-auto cf-text\">{{ 'subscription.plans.costs' | translate: { cost: getCostOfPlan(productState.allProducts, 1, selectedToggle.planPaymentInterval) } }}</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"row justify-content-center my-2\">\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tclass=\"col-12 text-center cf-text cf-text-2\">{{ 'subscription.plans.perUserMonthly' | translate }}</div>\n\t\t\t\t\t\t\t\t<div *ngIf=\"selectedToggle.planPaymentInterval === PlanPaymentInterval.MONTHLY\"\n\t\t\t\t\t\t\t\t\t\t class=\"col-12 text-center cf-text cf-text-2\">{{ 'subscription.plans.discount' | translate }}</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"row justify-content-center my-2\">\n\t\t\t\t\t\t\t\t<div *ngFor=\"let i of [0, 1, 2, 3]; let last = last\" class=\"col-12 text-center cf-text\"\n\t\t\t\t\t\t\t\t\t\t [ngClass]=\"{ 'cf-text-1': !last, 'cf-text-italic mt-2': last }\">\n\t\t\t\t\t\t\t\t\t{{ 'subscription.plans.pro.features.' + i | translate }}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</app-product-card>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-4\">\n\t\t\t\t\t\t<app-product-card gradeOfCard=\"2\" [productState]=\"productState\">\n\t\t\t\t\t\t\t<div class=\"corner-content font-weight-bold\">25 GB</div>\n\t\t\t\t\t\t\t<div class=\"corner-content\">{{'subscription.storage.perUser' | translate }}</div>\n\t\t\t\t\t\t\t<div class=\"row justify-content-center mt-3\">\n\t\t\t\t\t\t\t\t<div class=\"col-auto cf-suggested-text\">{{ 'subscription.plans.premium.note' | translate }}</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"row justify-content-center mt-2\">\n\t\t\t\t\t\t\t\t<div class=\"col-auto cf-h1\">{{ 'subscription.plans.premium.title' | translate }}</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"row justify-content-center\">\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tclass=\"col-auto cf-text\">{{ 'subscription.plans.costs' | translate: { cost: getCostOfPlan(productState.allProducts, 2, selectedToggle.planPaymentInterval) } }}</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"row justify-content-center my-2\">\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tclass=\"col-12 text-center cf-text cf-text-2\">{{ 'subscription.plans.perUserMonthly' | translate }}</div>\n\t\t\t\t\t\t\t\t<div *ngIf=\"selectedToggle.planPaymentInterval === PlanPaymentInterval.MONTHLY\"\n\t\t\t\t\t\t\t\t\t\t class=\"col-12 text-center cf-text cf-text-2\">{{ 'subscription.plans.discount' | translate }}</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"row justify-content-center\">\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"row justify-content-center my-2\">\n\t\t\t\t\t\t\t\t<div *ngFor=\"let i of []\" class=\"col-12 text-center cf-text cf-text-1\">\n\t\t\t\t\t\t\t\t\t{{ 'subscription.plans.premium.features.' + i | translate }}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div *ngFor=\"let i of [0,1,2]\" class=\"col-12 text-center cf-text cf-text-1 cf-text-upcoming\">\n\t\t\t\t\t\t\t\t\t{{ 'subscription.plans.premium.upcomingFeatures.' + i | translate }}\n\t\t\t\t\t\t\t\t\t<div class=\"asterisk\"> *</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div class=\"col-12 text-center cf-text cf-text-italic mt-2\">\n\t\t\t\t\t\t\t\t\t{{ 'subscription.plans.premium.includingProFeatures'| translate }}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</app-product-card>\n\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col\">\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclass=\"text-right mt-2 montserrat-text-light mr-3 coming-soon\">{{ 'subscription.plans.premium.comingSoon' | translate }}</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"row justify-content-center pt-4\">\n\t\t\t\t\t<div class=\"col-7\">\n\t\t\t\t\t\t<app-product-confirm [productChange]=\"productChange$ | async\"></app-product-confirm>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\n\t</div>\n\t<div class=\"trust-badge-wrapper\">\n\t\t<div class=\"d-flex align-items-end justify-content-center h-100\">\n\t\t\t<div class=\"container mb-3\">\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-xl-3 col-5\">\n\t\t\t\t\t\t<app-trust-badge name=\"refund\" [iconHeight]=\"124\"></app-trust-badge>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-xl-3 col-5\">\n\t\t\t\t\t\t<app-trust-badge name=\"award\"></app-trust-badge>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-xl-3 col-5\">\n\t\t\t\t\t\t<app-trust-badge name=\"support\"></app-trust-badge>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-xl-3 col-5\">\n\t\t\t\t\t\t<app-trust-badge name=\"madeInGermany\"></app-trust-badge>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { SubscriptionComponent } from './subscription/subscription.component';\nimport { redirectUnauthenticatedToLogin } from '../../../shared/helper/route-guard-functions';\nimport { ProductsComponent } from './products/products.component';\n\nconst routes: Routes = [\n\t{\n\t\tpath: '',\n\t\tcomponent: SubscriptionComponent,\n\t\tpathMatch: 'full',\n\t\tdata: {\n\t\t\tauthGuardPipe: redirectUnauthenticatedToLogin,\n\t\t},\n\t},\n\t{\n\t\tpath: 'products',\n\t\tcomponent: ProductsComponent,\n\t\tpathMatch: 'full',\n\t\tdata: {\n\t\t\tauthGuardPipe: redirectUnauthenticatedToLogin,\n\t\t},\n\t},\n];\n\n@NgModule({\n\timports: [RouterModule.forChild(routes)],\n\texports: [RouterModule],\n})\nexport class SubscriptionRoutingModule {\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { ToggleItem } from '../../../../shared/toggle/toggle.component';\nimport { PlanPaymentInterval, Product, ProductType, Subscription } from 'domain-entities';\nimport { MatDialog, MatDialogRef } from '@angular/material';\nimport { ProductService } from '../../../../shared/firebase/product.service';\nimport { BehaviorSubject, combineLatest, Observable, Subject } from 'rxjs';\nimport { filter, map, mergeMap, shareReplay, take, takeUntil } from 'rxjs/operators';\nimport { AuthService } from '../../../../shared/firebase/auth.service';\nimport { CompanyService } from '../../../../shared/firebase/company.service';\nimport { ProfileService } from '../../../../shared/firebase/profile.service';\nimport { SubscriptionWizardComponent } from '../../../shared/dialog/components/subscription-wizard/subscription-wizard.component';\nimport { SubscriptionService } from '../../../../shared/firebase/subscription.service';\nimport { Company } from '../../../../shared/models/company.model';\nimport { ProductChange } from './product-confirm/model/ProductChange';\nimport { ProductState } from './model/ProductState';\nimport { ProductChangeService } from './product-change.service';\nimport {\n\tgetCurrentPlan,\n\tgetLowestGradeProduct,\n\tgetPlanByPaymentInterval,\n\tgetProductByGrade,\n\tgetProductForCurrentPlan,\n\tgetProductForNextPlan,\n} from './shared/shared.functions';\nimport { DecimalPipe } from '@angular/common';\nimport { SubscriptionChangeType } from './model/SubscriptionChangeType';\nimport { SubscriptionChangeStatus } from './model/SubscriptionChangeStatus';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { DEFAULT_CURRENCY } from '../../../../shared/constants/subscription';\nimport { TrackEventType } from '../../../../shared/models/track-event.type';\nimport { TrackingDispatcherService } from '../../../../shared/tracking/tracking-dispatcher.service';\nimport { HotjarTrackingService } from '../../../third-party/hotjar-tracking/services/hotjar-tracking.service';\nimport { Store } from '@ngrx/store';\nimport { selectProductsTypeSubscription, selectProductsTypeSubscriptionAndTrial } from '../store/selectors/products.selectors';\nimport { selectSubscriptionState } from '../../../../store/selectors/app.selectors';\nimport { AppState } from '../../../../store/state/app.state';\n\nconst MONTH_PER_YEAR = 12;\n\n@Component({\n\tselector: 'app-products',\n\ttemplateUrl: './products.component.html',\n\tstyleUrls: ['./products.component.scss', '../../../../account/settings/settings.component.scss'],\n\tproviders: [DecimalPipe],\n})\nexport class ProductsComponent implements OnDestroy {\n\tpublic items: PlanPaymentIntervalToggleItem[] = [\n\t\t{\n\t\t\ttranslateKey: 'subscription.billingPeriod.yearly.title',\n\t\t\tnote: 'subscription.billingPeriod.yearly.note',\n\t\t\tplanPaymentInterval: PlanPaymentInterval.YEARLY,\n\t\t},\n\t\t{\n\t\t\ttranslateKey: 'subscription.billingPeriod.monthly.title',\n\t\t\tplanPaymentInterval: PlanPaymentInterval.MONTHLY,\n\t\t},\n\t];\n\tPlanPaymentInterval = PlanPaymentInterval;\n\tselectedToggle: PlanPaymentIntervalToggleItem;\n\twizardDialogRef: MatDialogRef<SubscriptionWizardComponent>;\n\tdestroy$: Subject<void> = new Subject();\n\n\tcompany$: Observable<Company>;\n\tsubscription$: Subject<Subscription> = new BehaviorSubject<Subscription>(null);\n\tproducts$ = this.store.select(selectProductsTypeSubscriptionAndTrial);\n\tproductState$: Observable<ProductState>;\n\n\tproductChange$: Observable<ProductChange>;\n\n\tget selectedToggleIndex(): number {\n\t\tif (!this.selectedToggle) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn this.items.findIndex(item => item.planPaymentInterval === this.selectedToggle.planPaymentInterval);\n\t}\n\n\tconstructor(\n\t\tprivate readonly authService: AuthService,\n\t\tprivate readonly companyService: CompanyService,\n\t\tprivate readonly profileService: ProfileService,\n\t\tprivate readonly productService: ProductService,\n\t\tprivate readonly subscriptionService: SubscriptionService,\n\t\tprivate readonly subscriptionWizardDialog: MatDialog,\n\t\tprivate readonly productChangeService: ProductChangeService,\n\t\tprivate readonly trackingDispatchService: TrackingDispatcherService,\n\t\tprivate readonly router: Router,\n\t\tprivate readonly decimalPipe: DecimalPipe,\n\t\tprivate readonly hotjarTrackingService: HotjarTrackingService,\n\t\tprivate readonly activeRoute: ActivatedRoute,\n\t\tprivate readonly store: Store<AppState>,\n\t) {\n\t\tthis.itemSelected(0, false);\n\t\tthis.initSubscriptionOfCompany();\n\t\tthis.initProductState();\n\t\tthis.initCompany();\n\t\tthis.initProductChanges();\n\t\tthis.initConfirmationWatch();\n\t\tthis.initWizard();\n\t\tthis.initToggleWatch();\n\t\tthis.initDirectlyRoutedProduct();\n\t}\n\n\tngOnDestroy(): void {\n\t\tthis.destroy$.next();\n\t\tthis.destroy$.complete();\n\t}\n\n\tpublic itemSelected(index: number, track: boolean): void {\n\t\tthis.selectedToggle = this.items[index];\n\t\tthis.productChangeService.updatePaymentInterval(this.selectedToggle.planPaymentInterval);\n\t\tif (!track) {\n\t\t\treturn;\n\t\t}\n\t\tthis.trackingDispatchService.emitTrackingEvent(\n\t\t\tTrackEventType.SUBSCRIPTION_PRODUCTS_INTERVAL_TOGGLE,\n\t\t\t{ type: this.selectedToggle.planPaymentInterval },\n\t\t);\n\t}\n\n\tprivate initCompany(): void {\n\t\tthis.company$ = this.authService.$authState.pipe(mergeMap(user => this.profileService\n\t\t\t.getProfile(user.uid)), mergeMap(profile => this.companyService.getCompany(profile.company)), shareReplay());\n\t}\n\n\tinitProductState(): void {\n\t\tthis.productState$ = combineLatest([this.subscription$, this.products$]).pipe(map(params => {\n\t\t\tconst [subscription, allProducts] = params;\n\t\t\tif (!subscription) {\n\t\t\t\tconst defaultProduct = getLowestGradeProduct(allProducts);\n\t\t\t\treturn { currentProduct: defaultProduct, nextProduct: defaultProduct, allProducts };\n\t\t\t}\n\t\t\tconst currentProduct = getProductForCurrentPlan(allProducts, subscription);\n\t\t\tconst nextProduct = getProductForNextPlan(allProducts, subscription);\n\t\t\tconst productState: ProductState = { currentProduct, nextProduct, allProducts };\n\t\t\treturn productState;\n\t\t}));\n\t}\n\n\tinitProductChanges(): void {\n\t\tthis.productChange$ = this.productChangeService.getProductChanges().pipe(\n\t\t\tfilter(\n\t\t\t\tchange => change.changeType === SubscriptionChangeType.NEW_SUBSCRIPTION ||\n\t\t\t\t\tchange.changeType === SubscriptionChangeType.PRODUCT_CHANGE),\n\t\t\tmap(change => change as ProductChange));\n\t}\n\n\tinitSubscriptionOfCompany(): void {\n\t\tconst allSubscription$ = this.subscriptionService.getCompanySubscriptions().pipe();\n\t\tcombineLatest([this.products$, allSubscription$]).pipe(map(params => {\n\t\t\tconst [products, subscriptions] = params;\n\t\t\treturn subscriptions.find(sub => getProductForCurrentPlan(products, sub).type === ProductType.SUBSCRIPTION);\n\t\t}), takeUntil(this.destroy$)).subscribe(subscription => {\n\t\t\tthis.subscription$.next(subscription);\n\t\t});\n\t}\n\n\tinitToggleWatch(): void {\n\t\tcombineLatest([this.subscription$, this.products$]).pipe(\n\t\t\tmap(([subscription, products]) => {\n\t\t\t\tif (!subscription) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst plan = getCurrentPlan(products, subscription);\n\t\t\t\tthis.selectedToggle = this.items.find(item => item.planPaymentInterval === plan.paymentInterval);\n\t\t\t}), takeUntil(this.destroy$)).subscribe();\n\t}\n\n\tprivate async openSubscriptionWizard(productChange: ProductChange): Promise<void> {\n\t\tconst products = await this.products$.pipe(take(1)).toPromise();\n\t\tconst initData = {\n\t\t\tproducts, productChange,\n\t\t};\n\t\tif (!initData) {\n\t\t\treturn;\n\t\t}\n\t\tthis.wizardDialogRef = this.subscriptionWizardDialog.open(SubscriptionWizardComponent, {\n\t\t\tdata: initData,\n\t\t\tdisableClose: true,\n\t\t\tpanelClass: 'no-padding-dialog',\n\t\t});\n\t}\n\n\tprivate initConfirmationWatch(): void {\n\t\tthis.productChange$.pipe(\n\t\t\tfilter(changes =>\n\t\t\t\tchanges.changeType === SubscriptionChangeType.PRODUCT_CHANGE ||\n\t\t\t\tchanges.changeType === SubscriptionChangeType.NEW_SUBSCRIPTION),\n\t\t\tfilter(changes => changes.status === SubscriptionChangeStatus.CONFIRMED),\n\t\t\ttakeUntil(this.destroy$),\n\t\t).subscribe(() => {\n\t\t\tif (this.wizardDialogRef) {\n\t\t\t\tthis.wizardDialogRef.close();\n\t\t\t}\n\t\t\tthis.router.navigate(['settings/subscription']);\n\t\t});\n\t}\n\n\tprivate initWizard(): void {\n\t\tthis.productChange$.pipe(\n\t\t\tfilter(changes => changes.changeType === SubscriptionChangeType.NEW_SUBSCRIPTION && changes.status === SubscriptionChangeStatus.OPEN),\n\t\t\ttakeUntil(this.destroy$))\n\t\t\t.subscribe(changes => {\n\t\t\t\tthis.trackWizardOpen(changes);\n\t\t\t\tthis.openSubscriptionWizard(changes);\n\t\t\t});\n\t}\n\n\tgetCostOfPlan(products: Product[], grade: number, paymentInterval: PlanPaymentInterval): string {\n\t\tconst product = getProductByGrade(products, grade);\n\t\tconst plan = getPlanByPaymentInterval(product, paymentInterval);\n\t\tconst factorForMonthlyCostDisplay = paymentInterval === PlanPaymentInterval.MONTHLY ? 1 : MONTH_PER_YEAR;\n\t\tconst costPerUser = plan.costPerUser[DEFAULT_CURRENCY] / factorForMonthlyCostDisplay;\n\n\t\treturn this.decimalPipe.transform(costPerUser, '1.2-2');\n\t}\n\n\tprivate trackWizardOpen(change: ProductChange): void {\n\t\tif (change.to.product.grade === 1) {\n\t\t\tthis.trackingDispatchService.emitTrackingEvent(TrackEventType.SUBSCRIPTION_PRODUCTS_WIZARD_OPEN, { type: 'pro' });\n\t\t} else if (change.to.product.grade === 2) {\n\t\t\tthis.trackingDispatchService.emitTrackingEvent(TrackEventType.SUBSCRIPTION_PRODUCTS_WIZARD_OPEN, { type: 'premium' });\n\t\t}\n\t}\n\n\tprivate async initDirectlyRoutedProduct(): Promise<void> {\n\t\tconst product: string = this.activeRoute.snapshot.queryParams['product'];\n\t\tconst term: string = this.activeRoute.snapshot.queryParams['term'];\n\n\t\tif (!term && !product) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst [activeSubscription, products, isTrialSubscription] = await combineLatest([\n\t\t\tthis.subscriptionService.getCurrentSubscription(),\n\t\t\tthis.store.select(selectProductsTypeSubscription),\n\t\t\tthis.store.select(selectSubscriptionState).pipe(map(state => {\n\t\t\t\treturn !!(state && state.trialSubscription);\n\t\t\t})),\n\t\t]).pipe(\n\t\t\ttake(1),\n\t\t).toPromise();\n\n\t\tif (activeSubscription && !isTrialSubscription) {\n\t\t\tthis.router.navigate(['settings/subscription']);\n\t\t\treturn;\n\t\t}\n\n\t\tif (term) {\n\t\t\tthis.selectedToggle = this.items\n\t\t\t\t.find(item => item.planPaymentInterval === term.toUpperCase()) || this.items[0];\n\t\t\tthis.productChangeService.updatePaymentInterval(this.selectedToggle.planPaymentInterval);\n\t\t}\n\n\t\tif (product) {\n\t\t\tconst productName = product.toLowerCase();\n\t\t\tconst selectedProduct = products\n\t\t\t\t.find(productTypeSubscription => productTypeSubscription.shortName.toLowerCase() === productName);\n\n\t\t\tif (!selectedProduct) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.productChangeService.scheduleProductChange(selectedProduct.grade);\n\t\t}\n\t}\n}\n\ninterface PlanPaymentIntervalToggleItem extends ToggleItem {\n\tplanPaymentInterval: PlanPaymentInterval;\n}\n\n","import { Action } from '@ngrx/store';\nimport { Actions, Effect, ofType, OnInitEffects } from '@ngrx/effects';\nimport { Injectable } from '@angular/core';\nimport * as productActions from '../actions/products.actions';\nimport { map, switchMap } from 'rxjs/operators';\nimport { ProductService } from '../../../../../shared/firebase/product.service';\n\n@Injectable()\nexport class ProductsEffects implements OnInitEffects {\n\n\tconstructor(\n\t\tprivate readonly actions$: Actions,\n\t\tprivate readonly productService: ProductService,\n\t) {\n\t}\n\n\t@Effect()\n\tloadProducts$ = this.actions$.pipe(\n\t\tofType(productActions.loadProducts),\n\t\tswitchMap(() => {\n\t\t\treturn this.productService.getAvailableProducts();\n\t\t}),\n\t\tmap(products => productActions.setProducts({ products })),\n\t);\n\n\tngrxOnInitEffects(): Action {\n\t\treturn productActions.loadProducts();\n\t}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { SubscriptionRoutingModule } from './subscription-routing.module';\nimport { SubscriptionComponent } from './subscription/subscription.component';\nimport { ProductsComponent } from './products/products.component';\nimport { ProductChangeComponent } from './products/product-change/product-change.component';\nimport { ProductConfirmComponent } from './products/product-confirm/product-confirm.component';\nimport { ProductCardComponent } from './products/product-card/product-card.component';\nimport { ManagePaymentIntervalComponent } from './subscription/manage-payment-interval/manage-payment-interval.component';\nimport { SharedModule } from '../../../shared/shared.module';\nimport { HotjarTrackingModule } from '../../third-party/hotjar-tracking/hotjar-tracking.module';\nimport { HotjarTrackingService } from '../../third-party/hotjar-tracking/services/hotjar-tracking.service';\nimport { environment } from '../../../../environments/environment';\nimport { StorageOptionsDialogComponent } from './storage-options-dialog/storage-options-dialog.component';\nimport { StorageOptionCardComponent } from './storage-options-dialog/storage-option-card/storage-option-card.component';\nimport { MatCardModule } from '@angular/material';\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\nimport { productsFeatureKey, reducer } from './store/reducers/products.reducer';\nimport { ProductsEffects } from './store/effects/products.effects';\n\n\n@NgModule({\n\tdeclarations: [\n\t\tSubscriptionComponent,\n\t\tProductsComponent,\n\t\tProductChangeComponent,\n\t\tProductConfirmComponent,\n\t\tProductCardComponent,\n\t\tManagePaymentIntervalComponent,\n\t\tStorageOptionsDialogComponent,\n\t\tStorageOptionCardComponent,\n\t],\n\timports: [\n\t\tCommonModule,\n\t\tSharedModule,\n\t\tSubscriptionRoutingModule,\n\t\tStoreModule.forFeature(productsFeatureKey, reducer),\n\t\tEffectsModule.forFeature([ProductsEffects]),\n\t\tMatCardModule,\n\t],\n\tproviders: [\n\t\tHotjarTrackingService,\n\t],\n\tentryComponents: [StorageOptionsDialogComponent],\n\texports: [\n\t\tSubscriptionRoutingModule,\n\t],\n})\nexport class SubscriptionModule {\n}\n"]}