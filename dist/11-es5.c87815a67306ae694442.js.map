{"version":3,"sources":["webpack:///src/app/modules/features/public-folders/public-folders.service.ts","webpack:///src/app/modules/features/public-folders/public-folders-footer/public-folders-footer.component.ts","webpack:///src/app/modules/features/public-folders/public-folders-footer/public-folders-footer.component.html","webpack:///src/app/modules/features/public-folders/public-file/file-icon/public-file-icon.component.html","webpack:///src/app/modules/features/public-folders/public-file/file-icon/public-file-icon.component.ts","webpack:///src/app/modules/features/public-folders/public-file/public-file.component.html","webpack:///src/app/modules/features/public-folders/public-file/public-file.component.ts","webpack:///src/app/modules/features/public-folders/page-not-found/page-not-found.component.ts","webpack:///src/app/modules/features/public-folders/page-not-found/page-not-found.component.html","webpack:///src/app/modules/features/public-folders/public-folders/public-folders.component.html","webpack:///src/app/modules/features/public-folders/public-folders/public-folders.component.ts","webpack:///src/app/modules/features/public-folders/public-folders.module.ts"],"names":["PublicFoldersService","PublicFoldersFooterComponent","http","folderId","token","this","get","environment","baseUrl","params","toPromise","file","fileName","request","bucketFileName","name","fileType","type","post","id","then","PublicFileIconComponent","baseFileService","decimalPipe","FileType","uploadPercentage","transform","getFileExtOrName","toUpperCase","deleteFile","downloadFile","PageNotFoundComponent","PublicFileComponent","dialog","datePipe","deviceTypeService","contextMenuOpen","_showMoreButtons","isPreviewFileType","galleryFiles","allFiles","filter","positionOfFileInGallery","indexOf","open","height","width","maxWidth","data","files","projectId","position","emit","val","isTouchDevice","fileIsUploading","showFile","PublicFoldersComponent","PublicFoldersModule","Errors","FILE_ALREADY_EXISTS","UPLOAD_ERROR","DELETION_ERROR","route","service","fileUploadService","alertService","translateService","addButtonsVisible","filesInCurrentLevel","destroy$","Subject","snapshot","queryParamMap","getFolderInformation","folderExists","getFolderStructure","next","complete","projectInfo","setFolderName","FOLDER","sortFiles","fileSelect","nativeElement","click","Array","from","length","forEach","x","i","uploadFile","fileWithNameExists","showAlert","localFile","addTemporaryLocalFile","percentage","uploadPublicFile","percentage$","pipe","takeUntil","subscribe","removeFile","value","res","fetch","fileUrl","createObjectURL","window","URL","blob","url","link","document","createElement","href","download","style","visibility","body","appendChild","removeChild","source","storeFileLocally","extension","checkFileType","size","creationTimestamp","unix","IMAGE","thumbUrl","addFile","sort","a","b","push","fileInCollection","some","existingFile","reader","FileReader","readAsDataURL","Promise","resolve","onload","result","topLevelFolder","find","publicFolder","error","text","instant","ROUTES","path","component","forChild"],"mappings":"qeAyBaA,EClBAC,E,yJDkBN,IAAMD,EAAN,WAEN,WACkBE,aAAA,KAAAA,OAHZ,uDAOeC,EAAkBC,GAItC,OAAOC,KAAKH,KAAKI,IAAIC,EAAA,EAAYC,QAAZD,wBAAuCJ,EAAvCI,YAFL,CAAEE,OADH,CAAEL,WAGwEM,cAXpF,yCAcaP,EAAkBC,GAGpC,OAAOC,KAAKH,KAAKI,IAAIC,EAAA,EAAYC,QAAU,iBAAiBL,EAD5C,CAAEM,OADH,CAAEL,WAEgEM,cAjB5E,uCAqBiBC,EAAkBC,EAAkBR,G,kKASnD,OARDS,EAAmC,CACxCC,eAAgBF,EAChBA,SAAUD,EAAKI,KACfC,SAAUL,EAAKM,KACfd,SAAUQ,EAAKR,SACfC,S,SAGYC,KAAKH,KAAKgB,KAAKX,EAAA,EAAYC,QAAU,iBAAiBG,EAAKR,SAAYU,GAASH,Y,0FA9BxF,iCAiCWC,EAAkBP,G,qLAG3BC,KAAKH,KAALG,OAAiBE,EAAA,EAAYC,QAAU,iBAAiBG,EAAKQ,GADpD,CAAEV,OADH,CAAEL,WAEkEM,YAAYU,Q,oDApC1F,M,oCAAMpB,GAAoB,Y,yBAApBA,EAAoB,QAApBA,EAAoB,qBAFpB,S,mGChBN,IAAMC,EAAN,yB,oCAAMA,I,uBAAAA,EAA4B,gfCPzC,gBACC,gBACC,gBACC,gBACC,gBACC,cACC,Q,oBAAqD,OACvD,OACA,gBACC,cACkB,S,qBAA8C,OACjE,OACA,iBAAmD,eACQ,S,qBAAgD,OAC3G,OACA,iBACC,e,qBACkB,S,qBAA4C,OAC/D,OACA,iBACC,aAAG,S,qBAA6C,OACjD,OACD,OAED,OACD,OAED,Q,MArBM,qEAIiB,wDAGwC,2DAGvD,4EACe,6DAGf,gE,ocCpBR,gB,yBAEA,uBACC,cACC,iBAIA,iBACA,iBAEC,kBAA6B,QAAY,OAC1C,OACD,OACD,Q,kBAHgC,0B,wBAIhC,iB,kBAAwE,kCCJjE,IAAMoB,EAAN,IAAMA,EAAN,WAGN,WACkBC,EACAC,aADA,KAAAD,kBACA,KAAAC,cAGlB,KAAAC,SAAW,EAAAA,SARL,2CAWL,gBAAInB,KAAKM,KAAKc,kBAAiE,MAA/BpB,KAAKM,KAAKc,iBAClDpB,KAAKkB,YAAYG,UAAUrB,KAAKM,KAAKc,iBAAkB,SAAW,IAEnEpB,KAAKiB,gBAAgBK,iBAAiBtB,KAAKM,MAAMiB,kBAdnD,M,oCAAMP,GAAuB,sB,uBAAvBA,EAAuB,gzBDXpC,sBAEA,sBAaA,uB,MAfK,6CAEA,uEAaA,wE,wHEJF,qBAAU,qEAA+D,oBAAS,OAClF,wBAAU,sEACT,oBAAQ,qDAAS,EAAAQ,WAAA,gBAAqC,Q,oBAAsC,OAC5F,oBAAQ,qDAAS,EAAAC,aAAA,gBAAuC,Q,oBAAwC,OACjG,O,sBAJ2C,+BAEY,+CACE,kDCDrD,ICNMC,EDMAC,EAAN,IAAMA,EAAN,WAsBN,WACkBC,EACAX,EACAY,EACAC,aAHA,KAAAF,SACA,KAAAX,kBACA,KAAAY,WACA,KAAAC,oBArBR,KAAAN,WAAa,IAAI,IACjB,KAAAC,aAAe,IAAI,IAE7B,KAAAM,mBAEQ,KAAAC,oBAVF,6CA8BI,WACT,IAAIhC,KAAK+B,gBAGT,GAAK/B,KAAKiB,gBAAgBgB,kBAAkBjC,KAAKM,MAAjD,CAIA,IAAM4B,EAAelC,KAAKmC,SAASC,QAAO9B,YAAIA,OAAIA,EAAKM,OAASZ,EAAKM,KAAKM,QACpEyB,EAA0BH,EAAaI,QAAQtC,KAAKM,MAC1DN,KAAK4B,OAAOW,KAAK,IAAsB,CACtCC,OAAQ,OACRC,MAAO,OACPC,SAAU,OACVC,KAAM,CACLC,MAAOV,EACPW,eAAUA,EACVC,SAAUT,UAZXrC,KAAKyB,aAAasB,KAAK/C,KAAKM,QAnCxB,wCAqDL,YAAO,IAAAN,KAAKM,KAAKc,mBArDZ,oCAWc4B,GACnBhD,KAAKgC,iBAAmBgB,GAZnB,eAgBL,QAAIhD,KAAK8B,kBAAkBmB,kBAGnBjD,KAAKgC,kBAAoBhC,KAAK+B,mBAAqB/B,KAAKkD,sBAnB3D,M,oCAAMvB,GAAmB,0C,uBAAnBA,EAAmB,igBDbhC,gBAAK,gCAAS,EAAAwB,aAAT,CAAoB,uDAApB,CAAoB,wDAExB,gBACC,iCACA,gBACC,iBAA8B,QAAa,OAC5C,OACA,gBAAuB,Q,eAAqD,OAC7E,OACA,gBACC,gCAOD,OACD,Q,MAfwB,4BAES,0BAER,iEAGV,yC,+YEHR,IAAMzB,EAAN,yB,oCAAMA,I,uBAAAA,EAAqB,8QCPlC,gBACC,gBACC,gBACA,gBACC,mBAAU,gBAAK,OACf,gBAA8C,Q,oBAAiD,OAC/F,gBAAmD,S,qBACnD,OACD,OACD,OACD,Q,MALiD,gEACK,qE,0eCEjD,iB,mBAAqC,4C,qBACrC,iB,iFAsBD,iBACC,iBACC,iBACC,iB,oBAED,OACD,OACD,Q,mBAHI,uH,qCAUC,iBACC,kBAAmC,Q,oBAA4C,OAC/E,oBAAQ,uEACP,mBAAU,cAAG,OACd,OACA,sBAAmB,iFAAnB,OAID,O,MAT+B,0BACK,oD,qCAUpC,iBACC,cACC,oBAAqB,+EACpB,mBAAqD,cAAG,OACzD,OACD,OACD,O,sBAHa,wD,qCAUZ,iBACC,iBACC,6BAAiB,2EAAqC,kEACE,OACzD,OACD,O,oCAFW,uBAAa,mC,yBAL1B,gBACC,iBACC,uBAMD,OACD,Q,mBAPqD,+C,0BA3BtD,iBACC,iBAA2C,QAAsD,OACjG,iBACC,uBAWA,uBAOD,OACD,OACA,sBACA,+B,6BAvB4C,2EAErC,yCAWA,wBAUM,oDAAuC,e,0BAtDxD,iBACC,iBACC,iBACC,gBAA4B,Q,oBAAmE,OAChG,OACD,OACA,iBACC,iBACC,gBAAkC,Q,qBAAmE,OACtG,OACD,OACA,kBACC,kBACC,S,qBACD,OACA,kBACC,gBAAM,SAA2B,OAClC,OACD,OACA,wBAQA,kBACC,kBACC,gCAsCD,OACD,OACD,Q,6BAlE+B,qFAKM,uFAKlC,2DAGM,wCAGH,oCAUU,oCAAqB,e,0BAvCtC,kBACC,gBACC,iBACC,iBACD,OACA,iBACC,uBACA,uBACD,OACD,OACA,0BAsED,Q,mBA1EQ,+CACA,gDAGF,oC,yBAVN,uB,4BAAK,4BAAmC,e,uBAqFzC,iBACC,yBACD,Q,sBAIA,6B,uBAIA,iBACC,mBAAU,wBAAa,OACvB,YAAG,Q,oBAAuC,OAC3C,Q,MADI,iD,uBAKJ,iBACC,qCACD,QC3FD,IAYa0B,GCUAC,GDtBRC,GAAL,SAAKA,G,OACJ,EAAAC,oBAAA,oBACA,EAAAC,aAAA,cACA,EAAAC,eAAA,gBAHIH,EAAL,CAIC,IAQM,KAAMF,GAAN,WAcN,WACkBM,EACAC,EACA1C,EACAW,EACAgC,EACAC,EACAC,aANA,KAAAJ,QACA,KAAAC,UACA,KAAA1C,kBACA,KAAAW,SACA,KAAAgC,oBACA,KAAAC,eACA,KAAAC,mBAflB,KAAAC,qBAIA,KAAAC,oBAAoC,GAEpC,KAAAC,SAAW,IAAIC,EAAA,EAZT,6C,4JA2B8C,OADnDlE,KAAKF,SAAWE,KAAK0D,MAAMS,SAAS/D,OAAiB,SACrDJ,KAAKD,MAAQC,KAAK0D,MAAMS,SAASC,cAAcnE,IAAI,S,SAE7CD,KAAKqE,uB,eACNrE,KAAKsE,c,qBAAAA,O,SAGJtE,KAAKuE,qB,kDAjCN,oCAqCLvE,KAAKiE,SAASO,OACdxE,KAAKiE,SAASQ,aAtCT,6C,4JA2CCC,O,kBAAoB1E,KAAK2D,QAAQU,qBAAqBrE,KAAKF,SAAUE,KAAKD,O,OAA/EC,KAAK0E,Y,OACL1E,KAAKsE,gB,gDAELtE,KAAKsE,gB,2DA9CD,2C,yKAmDC1B,O,SAAc5C,KAAK2D,QAAQY,mBAAmBvE,KAAKF,SAAUE,KAAKD,O,OAAlE6C,E,OACN5C,KAAK2E,cAAc/B,GACnB5C,KAAKgE,oBAAsBpB,EAAMR,QAAO9B,YAAIA,OAAIA,EAAKR,WAAaE,EAAKF,UAAYQ,EAAKM,OAAS,EAAAO,SAASyD,UAC1G5E,KAAK6E,Y,kDAtDA,kDA0DL7E,KAAK+D,mBAAqB/D,KAAK+D,oBA1D1B,0CA8DL/D,KAAK8E,WAAWC,cAAcC,UA9DzB,kCAiEMpC,cACXqC,MAAMC,KAAK,CAAEC,OAAQvC,EAAMuC,SAAUC,SAAQ,SAACC,EAAGC,GAAJ,OAAUtF,EAAKuF,WAAW3C,EAAM0C,SAlExE,iCAsEWhF,G,4KACZN,KAAKwF,mBAAmBlF,G,8CAC3BN,KAAKyF,UAAUnC,GAAOC,sB,OAGjBmC,O,SAAkB1F,KAAK2F,sBAAsBrF,G,OAE+CsF,OAF5FF,E,SACwB1F,KAAK4D,kBAAkBiC,iBAAiBvF,GAA9DI,E,EAAF,MAAQoF,E,EAAF,aACAC,KAAK,OAAAC,EAAA,GAAUhG,KAAKiE,WAAWgC,WAAWL,YAAUA,OAAKF,EAAUtE,iBAAmBwE,K,UAC5FE,EAAYzF,Y,QAEPS,O,oBAAWd,KAAK2D,QAAQkC,iBAAiBH,EAAWhF,EAAMV,KAAKD,O,QAAzE2F,EAAU5E,G,0DAEVd,KAAKkG,WAAWR,GAChB1F,KAAKyF,UAAUnC,GAAOE,c,yBAEtBkC,EAAUtE,wBACVpB,KAAK8E,WAAWC,cAAcoB,MAAQ,G,gFAtFlC,iCA0FW7F,G,4JAChB,O,kBACON,KAAK2D,QAAQnC,WAAWlB,EAAMN,KAAKD,O,OACzCC,KAAKkG,WAAW5F,G,+CAGhBN,KAAKyF,UAAUnC,GAAOG,gB,0DAhGlB,mCAoGanD,G,sKACZ8F,O,SAAYC,MAAM/F,EAAKgG,S,OACUC,OADjCH,E,YACMI,OAAOC,I,SAA0BL,EAAIM,O,mBAA3CC,E,KAAiBJ,gB,iBACjBK,EAAOC,SAASC,cAAc,MAE/BC,KAAOJ,EACZC,EAAKI,SAAW1G,EAAKI,KACrBkG,EAAKK,MAAMC,WAAa,SACxBL,SAASM,KAAKC,YAAYR,GAC1BA,EAAK5B,QACL6B,SAASM,KAAKE,YAAYT,G,8CA9GrB,4CAiH8BtG,G,wKAC7BgH,O,SAAetH,KAAKuH,iBAAiBjH,G,cAArCgH,E,OACAE,EAAYxH,KAAKiB,gBAAgBK,iBAAiBhB,GAClDM,EAAOZ,KAAKiB,gBAAgBwG,cAAcD,GAE1C9B,EAAwB,CAC7B5E,QAAGA,EACHJ,KAAMJ,EAAKI,KACX4F,QAASgB,EACTxH,SAAUE,KAAKF,SACfc,OACA8G,KAAMpH,EAAKoH,KACXC,kBAAmB,MAASC,Q,mBAGzBhH,IAAS,EAAAO,SAAS0G,QACrBnC,EAAUoC,SAAWR,GAGtBtH,KAAK+H,QAAQrC,GACNA,I,kDArIF,kCAyIL1F,KAAKgE,oBAAoBgE,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAEP,kBAAoBM,EAAEN,uBAzI3D,8BA4IUrH,GACfN,KAAKgE,oBAAoBmE,KAAK7H,GAC9BN,KAAK6E,cA9IA,iCAiJavE,GAClBN,KAAKgE,oBAAsBhE,KAAKgE,oBAAoB5B,QAAOgG,YAAgBA,OAAIA,EAAiBtH,KAAOR,EAAKQ,MAC5Gd,KAAK6E,cAnJA,yCAsJqBvE,GAC1B,OAAON,KAAKgE,oBAAoBqE,MAAKC,YAAYA,OAAIA,EAAa5H,OAASJ,EAAKI,UAvJ3E,uCA0JyBJ,G,yKACxBiI,EAAS,IAAIC,W,mBACnBD,EAAOE,cAAcnI,GACd,IAAIoI,SAAQC,YAClBJ,EAAOK,OAAS,WACfD,EAAQJ,EAAOM,c,6CA/JZ,oCAoKgBjG,GACrB,IAAMkG,EAAiBlG,EAAMmG,MAAKzI,YAAIA,OAAIA,EAAKM,OAAS,EAAAO,SAASyD,SAAWtE,EAAKR,YAC7EgJ,IACH9I,KAAKgJ,aAAeF,KAvKhB,gCA2KYG,GACjB,IAAMC,EAAOlJ,KAAK8D,iBAAiBqF,QAAQ,wBAAwBF,GACnEjJ,KAAK6D,aAAa4B,UAAUyD,EAAM,SA7K7B,M,oCAAM9F,IAAsB,sE,wBAAtBA,GAAsB,2D,MAAA,K,2xDD3BnC,gBACC,+BAmFA,oCACD,OACA,yCAMA,yCAIA,yCAOA,0C,oBAtGc,6CAAmC,gB,grDCwBpC,CAAC,IAAiB,Q,8BCXzBgG,GAAS,CACd,CACCC,KAAM,YACNC,UAAW,KAoBN,KAAMjG,GAAN,yB,qBAAMA,K,qDAAAA,KAAmB,SAbtB,CACR,IAAakG,SAASH,IACtB,IACA,IACA,IACA,IACA,KACA,MAGA,O","file":"x","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from '../../../../environments/environment';\nimport { File as FileEntity, FileType } from 'domain-entities';\n\nexport type PublicFile = FileEntity & { fileUrl: string, thumbUrl?: string, uploadPercentage?: number };\n\nexport interface ProjectInfoResult {\n\tcompanyName: string;\n\tcompanyLogo?: string;\n\tprojectName: string;\n\tprojectId: string;\n}\n\ninterface UploadPublicFileRequest {\n\tbucketFileName?: string;\n\tfileName: string;\n\tfolderId: string;\n\tfileType: FileType;\n\ttoken: string;\n}\n\n@Injectable({\n\tprovidedIn: 'root',\n})\nexport class PublicFoldersService {\n\n\tconstructor(\n\t\tprivate readonly http: HttpClient,\n\t) {\n\t}\n\n\tgetFolderInformation(folderId: string, token: string): Promise<ProjectInfoResult> {\n\t\tconst params = { token };\n\t\tconst options = { params };\n\n\t\treturn this.http.get(environment.baseUrl + `publicFolders/${folderId}/project`, options).toPromise() as Promise<ProjectInfoResult>;\n\t}\n\n\tgetFolderStructure(folderId: string, token: string): Promise<PublicFile[]> {\n\t\tconst params = { token };\n\t\tconst options = { params };\n\t\treturn this.http.get(environment.baseUrl + `publicFolders/${folderId}`, options).toPromise() as Promise<PublicFile[]>;\n\t}\n\n\n\tasync uploadPublicFile(file: PublicFile, fileName: string, token: string): Promise<string> {\n\t\tconst request: UploadPublicFileRequest = {\n\t\t\tbucketFileName: fileName,\n\t\t\tfileName: file.name,\n\t\t\tfileType: file.type,\n\t\t\tfolderId: file.folderId,\n\t\t\ttoken,\n\t\t};\n\n\t\treturn await this.http.post(environment.baseUrl + `publicFolders/${file.folderId}`, request).toPromise() as string;\n\t}\n\n\tasync deleteFile(file: PublicFile, token: string): Promise<void> {\n\t\tconst params = { token };\n\t\tconst options = { params };\n\t\treturn this.http.delete(environment.baseUrl + `publicFolders/${file.id}`, options).toPromise().then() as Promise<void>;\n\t}\n}\n","import { Component } from '@angular/core';\n\n@Component({\n\tselector: 'app-public-folders-footer',\n\ttemplateUrl: './public-folders-footer.component.html',\n\tstyleUrls: ['./public-folders-footer.component.scss'],\n})\nexport class PublicFoldersFooterComponent {\n\n}\n","<div class=\"footer\">\n\t<div class=\"container\">\n\t\t<div class=\"container\">\n\t\t\t<div class=\"mt-4 d-flex justify-content-between align-items-center montserrat-text-light flex-wrap\">\n\t\t\t\t<div class=\"d-flex align-items-center footer-item\">\n\t\t\t\t\t<a href=\"https://www.craftnote.de/ueber\" target=\"_blank\">\n\t\t\t\t\t\t{{'publicFolders.footer.aboutCraftnote' | translate}}</a>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"d-flex align-items-center footer-item\">\n\t\t\t\t\t<a href=\"https://www.craftnote.de/datenschutz\"\n\t\t\t\t\t\t target=\"_blank\">{{'publicFolders.footer.privacy' | translate}}</a>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"d-flex align-items-center footer-item\"><a\n\t\t\t\t\thref=\"https://www.craftnote.de/impressum\" target=\"_blank\">{{'publicFolders.footer.impressum' | translate}}</a>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"d-flex align-items-center footer-item\">\n\t\t\t\t\t<a [href]=\"'mailto:'+('publicFolders.footer.mail'|translate)\"\n\t\t\t\t\t\t target=\"_blank\">{{'publicFolders.footer.mail' | translate}} </a>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"d-flex align-items-center footer-item\">\n\t\t\t\t\t<a>{{'publicFolders.footer.phone' | translate}} </a>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t</div>\n\t</div>\n\n</div>\n","<img *ngIf=\"file.type===FileType.FOLDER\" src=\"./assets/images/icons/folder-icon.svg\">\n\n<svg *ngIf=\"file.type!==FileType.FOLDER && !file.thumbUrl\" height=\"61\" viewBox=\"10 0 51 60\" width=\"69\">\n\t<g fill=\"none\" fill-rule=\"evenodd\">\n\t\t<path\n\t\t\td=\"M41.383 1l18.44 18.292v38.145a2.4 2.4 0 0 1-2.4 2.4H12.399a2.4 2.4 0 0 1-2.399-2.4V3.399A2.4 2.4 0 0 1 12.4 1h28.983z\"\n\t\t\tfill=\"#9E9E9E\"\n\t\t/>\n\t\t<path d=\"M41.383 1l18.44 18.292v.555H43.373a2.4 2.4 0 0 1-2.399-2.4V1h.408z\" fill=\"#D4D4D4\"/>\n\t\t<text fill=\"black\" font-family=\"Helvetica-Bold, Helvetica\" font-size=\"12.397\" font-weight=\"bold\"\n\t\t\t\t\ttransform=\"translate(10 1)\">\n\t\t\t<tspan x=\"10.858\" y=\"38.124\">{{iconText}}</tspan>\n\t\t</text>\n\t</g>\n</svg>\n<img *ngIf=\"file.type!==FileType.FOLDER && file.thumbUrl\" class=\"thumb\" [src]=\"file.thumbUrl\"/>\n","import { Component, Input } from '@angular/core';\nimport { BaseFileService } from '../../../../../shared/helper/base-file.service';\nimport { FileType } from 'domain-entities';\nimport { PublicFile } from '../../public-folders.service';\nimport { DecimalPipe } from '@angular/common';\n\n@Component({\n\tselector: 'app-public-file-icon',\n\ttemplateUrl: './public-file-icon.component.html',\n\tstyleUrls: ['./public-file-icon.component.scss'],\n})\nexport class PublicFileIconComponent {\n\t@Input() file: PublicFile;\n\n\tconstructor(\n\t\tprivate readonly baseFileService: BaseFileService,\n\t\tprivate readonly decimalPipe: DecimalPipe) {\n\t}\n\n\tFileType = FileType;\n\n\tget iconText(): string {\n\t\tif (this.file.uploadPercentage !== undefined && this.file.uploadPercentage !== 100) {\n\t\t\treturn this.decimalPipe.transform(this.file.uploadPercentage, '2.0-0') + '%';\n\t\t}\n\t\treturn this.baseFileService.getFileExtOrName(this.file).toUpperCase();\n\t}\n}\n","<div (click)=\"showFile()\" class=\"d-flex mx-lg-4 pointer\" (mouseenter)=\"showMoreButtons = true\"\n\t\t (mouseleave)=\"showMoreButtons = false\">\n\t<div class=\"file-icon\">\n\t\t<app-public-file-icon [file]=\"file\"></app-public-file-icon>\n\t\t<div class=\"text-break mt-1\">\n\t\t\t<span class=\"montserrat-text\">{{file.name}}</span>\n\t\t</div>\n\t\t<div class=\"file-date\">{{file.creationTimestamp * 1000 | date: 'shortDate'}}</div>\n\t</div>\n\t<div class=\"d-flex align-items-start more-button-container\">\n\t\t<ng-template [ngIf]=\"showMoreButtons\">\n\t\t\t<mat-icon (click)=\"contextMenuOpen = true\" [mat-menu-trigger-for]=\"menu\">more_vert</mat-icon>\n\t\t\t<mat-menu (closed)=\"contextMenuOpen = false\" #menu=\"matMenu\">\n\t\t\t\t<button (click)=\"deleteFile.emit(file)\" mat-menu-item>{{'publicFolders.delete' | translate}}</button>\n\t\t\t\t<button (click)=\"downloadFile.emit(file)\" mat-menu-item>{{'publicFolders.download' | translate}}</button>\n\t\t\t</mat-menu>\n\t\t</ng-template>\n\t</div>\n</div>\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { PublicFile } from '../public-folders.service';\nimport { PopupDialogComponent } from '../../../../work/file-explorer/modals/popup-dialog/popup-dialog.component';\nimport { MatDialog } from '@angular/material';\nimport { BaseFileService } from '../../../../shared/helper/base-file.service';\nimport { DatePipe } from '@angular/common';\nimport { DeviceTypeService } from '../../../../shared/devices/device-type.service';\n\n@Component({\n\tselector: 'app-public-file',\n\ttemplateUrl: './public-file.component.html',\n\tstyleUrls: ['./public-file.component.scss'],\n})\nexport class PublicFileComponent {\n\t@Input() file: PublicFile;\n\t@Input() allFiles: PublicFile[];\n\n\n\t@Output() deleteFile = new EventEmitter<PublicFile>();\n\t@Output() downloadFile = new EventEmitter<PublicFile>();\n\n\tcontextMenuOpen = false;\n\n\tprivate _showMoreButtons = false;\n\tset showMoreButtons(val: boolean) {\n\t\tthis._showMoreButtons = val;\n\t}\n\n\tget showMoreButtons(): boolean {\n\t\tif (this.deviceTypeService.isTouchDevice()) {\n\t\t\treturn true;\n\t\t}\n\t\treturn (this._showMoreButtons || this.contextMenuOpen) && !this.fileIsUploading();\n\t}\n\n\tconstructor(\n\t\tprivate readonly dialog: MatDialog,\n\t\tprivate readonly baseFileService: BaseFileService,\n\t\tprivate readonly datePipe: DatePipe,\n\t\tprivate readonly deviceTypeService: DeviceTypeService,\n\t) {\n\t}\n\n\tshowFile(): void {\n\t\tif (this.contextMenuOpen) {\n\t\t\treturn;\n\t\t}\n\t\tif (!this.baseFileService.isPreviewFileType(this.file)) {\n\t\t\tthis.downloadFile.emit(this.file);\n\t\t\treturn;\n\t\t}\n\t\tconst galleryFiles = this.allFiles.filter(file => file.type === this.file.type);\n\t\tconst positionOfFileInGallery = galleryFiles.indexOf(this.file);\n\t\tthis.dialog.open(PopupDialogComponent, {\n\t\t\theight: '100%',\n\t\t\twidth: '100%',\n\t\t\tmaxWidth: '100%',\n\t\t\tdata: {\n\t\t\t\tfiles: galleryFiles,\n\t\t\t\tprojectId: undefined,\n\t\t\t\tposition: positionOfFileInGallery,\n\t\t\t},\n\t\t});\n\t}\n\n\tprivate fileIsUploading(): boolean {\n\t\treturn this.file.uploadPercentage !== undefined;\n\t}\n}\n","import { Component } from '@angular/core';\n\n@Component({\n\tselector: 'app-page-not-found',\n\ttemplateUrl: './page-not-found.component.html',\n\tstyleUrls: ['./page-not-found.component.scss'],\n})\nexport class PageNotFoundComponent {\n}\n","<div class=\"container mt-5\">\n\t<div class=\"d-flex flex-column h-100\">\n\t\t<div class=\"flex-grow-1\"></div>\n\t\t<div class=\"content\">\n\t\t\t<mat-icon>error</mat-icon>\n\t\t\t<div class=\"sorry montserrat-text-light pt-2\">{{'publicFolders.notFound.sorry' | translate}}...</div>\n\t\t\t<div class=\"sorry-text montserrat-text-light pt-4\">{{'publicFolders.notFound.sorryText' | translate}}\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n","<div class=\"d-flex h-100 flex-column justify-content-between\">\n\t<ng-template [ngIf]=\"folderExists !== undefined\" [ngIfElse]=\"loading\">\n\t\t<div *ngIf=\"folderExists; else notFound\" class=\"container\" #pageContent>\n\t\t\t<div class=\"banner-wrapper\">\n\t\t\t\t<div class=\"w-100 banner\">\n\t\t\t\t\t<img src=\"/assets/images/banner-image-businesscard.png\">\n\t\t\t\t</div>\n\t\t\t\t<div class=\"logo d-flex align-items-center justify-content-center\">\n\t\t\t\t\t<img *ngIf=\"projectInfo.companyLogo\" [src]=\"projectInfo.companyLogo\">\n\t\t\t\t\t<img *ngIf=\"!projectInfo.companyLogo\" src=\"assets/images/default-company-website-logo.png\">\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div *ngIf=\"projectInfo\" class=\"project-info\">\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-12\">\n\t\t\t\t\t\t<h2 class=\"montserrat-text\">{{'publicFolders.project'| translate}}: {{projectInfo.projectName}}</h2>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-12\">\n\t\t\t\t\t\t<h5 class=\"montserrat-text-light\">{{'publicFolders.projectId'| translate}}: {{projectInfo.projectId}}</h5>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"row mt-4\">\n\t\t\t\t\t<div class=\"col-12 col-md-2 montserrat-text company\">\n\t\t\t\t\t\t{{'publicFolders.company'| translate}}:\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-12 col-md-10 center company-text\">\n\t\t\t\t\t\t<span>{{projectInfo.companyName}}</span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div *ngIf=\"publicFolder\" class=\"row\">\n\t\t\t\t\t<div class=\"col-12 mt-5\">\n\t\t\t\t\t\t<div class=\"hint\">\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t[innerHTML]=\"'publicFolders.hint'| translate: {companyName: projectInfo.companyName, folderName: publicFolder.name}\"></div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"row mt-5\">\n\t\t\t\t\t<div class=\"col-12\">\n\t\t\t\t\t\t<ng-template [ngIf]=\"publicFolder\" [ngIfElse]=\"spinner\">\n\t\t\t\t\t\t\t<div class=\"d-flex justify-content-between mb-2\">\n\t\t\t\t\t\t\t\t<div class=\"font-weight-bold folder-title\">{{publicFolder.name}} ({{filesInCurrentLevel.length}})</div>\n\t\t\t\t\t\t\t\t<div class=\"d-flex align-items-center\">\n\t\t\t\t\t\t\t\t\t<div *ngIf=\"addButtonsVisible\" [@shrinkOut] class=\"add-line\">\n\t\t\t\t\t\t\t\t\t\t<span class=\"fab-text orange-text\">{{ 'publicFolders.uploadFile' | translate }}</span>\n\t\t\t\t\t\t\t\t\t\t<button (click)=\"openFileSelection()\" color=\"primary\" mat-mini-fab>\n\t\t\t\t\t\t\t\t\t\t\t<mat-icon>add</mat-icon>\n\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t<input #fileSelect (change)=\"uploadFiles($event.target.files)\" id=\"file-upload-input\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t type=\"file\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t hidden\n\t\t\t\t\t\t\t\t\t\t\t\t\t multiple=\"false\"/>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<!-- Activate when implementing folder creation -->\n\t\t\t\t\t\t\t\t\t<div *ngIf=\"false\" class=\"add-line\">\n\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t<button class=\"mb-1\" (click)=\"toggleAddButtonVisibility()\" color=\"primary\" mat-mini-fab>\n\t\t\t\t\t\t\t\t\t\t\t\t<mat-icon [@rotate]=\"addButtonsVisible? 'in': 'out'\">add</mat-icon>\n\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<mat-divider></mat-divider>\n\t\t\t\t\t\t\t<ng-template [ngIf]=\"filesInCurrentLevel.length > 0\" [ngIfElse]=\"noFiles\">\n\t\t\t\t\t\t\t\t<div class=\"container\">\n\t\t\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t\t\t<div class=\"col-6 col-md-4 col-lg-3 col-xl-2 mt-4\" *ngFor=\"let file of filesInCurrentLevel\">\n\t\t\t\t\t\t\t\t\t\t\t<div class=\"d-flex justify-content-center w-100\">\n\t\t\t\t\t\t\t\t\t\t\t\t<app-public-file (downloadFile)=\"downloadFile($event)\" (deleteFile)=\"deleteFile($event)\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t [file]=\"file\" [allFiles]=\"filesInCurrentLevel\"></app-public-file>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</ng-template>\n\t\t\t\t\t\t</ng-template>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</ng-template>\n\t<app-public-folders-footer></app-public-folders-footer>\n</div>\n<ng-template #spinner>\n\t<div class=\"w-100 mt-5 d-flex justify-content-center\">\n\t\t<mat-spinner diameter=\"45\"></mat-spinner>\n\t</div>\n</ng-template>\n\n<ng-template #notFound>\n\t<app-page-not-found></app-page-not-found>\n</ng-template>\n\n<ng-template #noFiles>\n\t<div class=\"w-100 mt-5 d-flex flex-column align-items-center not-found\">\n\t\t<mat-icon>photo_library</mat-icon>\n\t\t<p>{{'publicFolders.noFiles' | translate}}</p>\n\t</div>\n</ng-template>\n\n<ng-template #loading>\n\t<div class=\"w-100 h-100 d-flex align-items-center justify-content-center\">\n\t\t<app-pulsing-craftnote-icon></app-pulsing-craftnote-icon>\n\t</div>\n</ng-template>\n","import { Component, ElementRef, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { ProjectInfoResult, PublicFile, PublicFoldersService } from '../public-folders.service';\nimport { RotateAnimation } from '../../../../shared/animations/rotate.animation';\nimport { ShrinkOutAnimation } from '../../../../shared/animations/shrounk-out-animation';\nimport { File as FileEntity, FileType } from 'domain-entities';\nimport { BaseFileService } from '../../../../shared/helper/base-file.service';\nimport { MatDialog } from '@angular/material';\nimport { FileUploadService } from '../../../../shared/file-upload/file-upload.service';\nimport { AlertService } from '../../../../shared/alert/alert.service';\nimport { TranslateService } from '@ngx-translate/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport moment from 'moment';\n\nenum Errors {\n\tFILE_ALREADY_EXISTS = 'fileAlreadyExists',\n\tUPLOAD_ERROR = 'uploadError',\n\tDELETION_ERROR = 'deletionError',\n}\n\n@Component({\n\tselector: 'app-public-folders',\n\ttemplateUrl: './public-folders.component.html',\n\tstyleUrls: ['./public-folders.component.scss'],\n\tanimations: [RotateAnimation, ShrinkOutAnimation],\n})\nexport class PublicFoldersComponent implements OnInit, OnDestroy {\n\t@ViewChild('fileSelect') fileSelect: ElementRef;\n\n\tfolderId: string;\n\ttoken: string;\n\tfolderExists: boolean;\n\taddButtonsVisible = true;\n\n\tprojectInfo: ProjectInfoResult;\n\tpublicFolder: FileEntity;\n\tfilesInCurrentLevel: PublicFile[] = [];\n\n\tdestroy$ = new Subject<void>();\n\n\tconstructor(\n\t\tprivate readonly route: ActivatedRoute,\n\t\tprivate readonly service: PublicFoldersService,\n\t\tprivate readonly baseFileService: BaseFileService,\n\t\tprivate readonly dialog: MatDialog,\n\t\tprivate readonly fileUploadService: FileUploadService,\n\t\tprivate readonly alertService: AlertService,\n\t\tprivate readonly translateService: TranslateService,\n\t) {\n\t}\n\n\tasync ngOnInit(): Promise<void> {\n\t\tthis.folderId = this.route.snapshot.params['folderId'];\n\t\tthis.token = this.route.snapshot.queryParamMap.get('token');\n\n\t\tawait this.getFolderInformation();\n\t\tif (!this.folderExists) {\n\t\t\treturn;\n\t\t}\n\t\tawait this.getFolderStructure();\n\t}\n\n\tngOnDestroy(): void {\n\t\tthis.destroy$.next();\n\t\tthis.destroy$.complete();\n\t}\n\n\tasync getFolderInformation(): Promise<void> {\n\t\ttry {\n\t\t\tthis.projectInfo = await this.service.getFolderInformation(this.folderId, this.token);\n\t\t\tthis.folderExists = true;\n\t\t} catch (error) {\n\t\t\tthis.folderExists = false;\n\t\t}\n\t}\n\n\tasync getFolderStructure(): Promise<void> {\n\t\tconst files = await this.service.getFolderStructure(this.folderId, this.token);\n\t\tthis.setFolderName(files);\n\t\tthis.filesInCurrentLevel = files.filter(file => file.folderId === this.folderId && file.type !== FileType.FOLDER);\n\t\tthis.sortFiles();\n\t}\n\n\ttoggleAddButtonVisibility(): void {\n\t\tthis.addButtonsVisible = !this.addButtonsVisible;\n\t}\n\n\topenFileSelection(): void {\n\t\tthis.fileSelect.nativeElement.click();\n\t}\n\n\tuploadFiles(files: FileList): void {\n\t\tArray.from({ length: files.length }).forEach((x, i) => this.uploadFile(files[i]));\n\t}\n\n\n\tasync uploadFile(file: File): Promise<void> {\n\t\tif (this.fileWithNameExists(file)) {\n\t\t\tthis.showAlert(Errors.FILE_ALREADY_EXISTS);\n\t\t\treturn;\n\t\t}\n\t\tconst localFile = await this.addTemporaryLocalFile(file);\n\t\tconst { name, percentage$ } = this.fileUploadService.uploadPublicFile(file);\n\t\tpercentage$.pipe(takeUntil(this.destroy$)).subscribe((percentage) => localFile.uploadPercentage = percentage);\n\t\tawait percentage$.toPromise();\n\t\ttry {\n\t\t\tlocalFile.id = await this.service.uploadPublicFile(localFile, name, this.token);\n\t\t} catch (error) {\n\t\t\tthis.removeFile(localFile);\n\t\t\tthis.showAlert(Errors.UPLOAD_ERROR);\n\t\t} finally {\n\t\t\tlocalFile.uploadPercentage = undefined;\n\t\t\tthis.fileSelect.nativeElement.value = '';\n\t\t}\n\t}\n\n\tasync deleteFile(file: PublicFile): Promise<void> {\n\t\ttry {\n\t\t\tawait this.service.deleteFile(file, this.token);\n\t\t\tthis.removeFile(file);\n\n\t\t} catch (error) {\n\t\t\tthis.showAlert(Errors.DELETION_ERROR);\n\t\t}\n\t}\n\n\tasync downloadFile(file: PublicFile): Promise<void> {\n\t\tconst res = await fetch(file.fileUrl);\n\t\tconst url = window.URL.createObjectURL(await res.blob());\n\t\tconst link = document.createElement('a');\n\n\t\tlink.href = url;\n\t\tlink.download = file.name;\n\t\tlink.style.visibility = 'hidden';\n\t\tdocument.body.appendChild(link);\n\t\tlink.click();\n\t\tdocument.body.removeChild(link);\n\t}\n\n\tprivate async addTemporaryLocalFile(file: File): Promise<PublicFile> {\n\t\tconst source = await this.storeFileLocally(file);\n\t\tconst extension = this.baseFileService.getFileExtOrName(file);\n\t\tconst type = this.baseFileService.checkFileType(extension) as FileType;\n\n\t\tconst localFile: PublicFile = {\n\t\t\tid: undefined,\n\t\t\tname: file.name,\n\t\t\tfileUrl: source,\n\t\t\tfolderId: this.folderId,\n\t\t\ttype,\n\t\t\tsize: file.size,\n\t\t\tcreationTimestamp: moment().unix(),\n\t\t} as PublicFile;\n\n\t\tif (type === FileType.IMAGE) {\n\t\t\tlocalFile.thumbUrl = source;\n\t\t}\n\n\t\tthis.addFile(localFile);\n\t\treturn localFile;\n\t}\n\n\tprivate sortFiles(): void {\n\t\tthis.filesInCurrentLevel.sort((a, b) => b.creationTimestamp - a.creationTimestamp);\n\t}\n\n\tprivate addFile(file: PublicFile): void {\n\t\tthis.filesInCurrentLevel.push(file);\n\t\tthis.sortFiles();\n\t}\n\n\tprivate removeFile(file: PublicFile): void {\n\t\tthis.filesInCurrentLevel = this.filesInCurrentLevel.filter(fileInCollection => fileInCollection.id !== file.id);\n\t\tthis.sortFiles();\n\t}\n\n\tprivate fileWithNameExists(file: File): boolean {\n\t\treturn this.filesInCurrentLevel.some(existingFile => existingFile.name === file.name);\n\t}\n\n\tprivate async storeFileLocally(file: File): Promise<string> {\n\t\tconst reader = new FileReader();\n\t\treader.readAsDataURL(file);\n\t\treturn new Promise(resolve => {\n\t\t\treader.onload = () => {\n\t\t\t\tresolve(reader.result as string);\n\t\t\t};\n\t\t});\n\t}\n\n\tprivate setFolderName(files: FileEntity[]): void {\n\t\tconst topLevelFolder = files.find(file => file.type === FileType.FOLDER && !file.folderId);\n\t\tif (topLevelFolder) {\n\t\t\tthis.publicFolder = topLevelFolder;\n\t\t}\n\t}\n\n\tprivate showAlert(error: Errors): void {\n\t\tconst text = this.translateService.instant(`publicFolders.errors.${error}`);\n\t\tthis.alertService.showAlert(text, 4000);\n\t}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PublicFoldersComponent } from './public-folders/public-folders.component';\nimport { RouterModule } from '@angular/router';\nimport { MatDividerModule, MatMenuModule } from '@angular/material';\nimport { SharedModule } from '../../../shared/shared.module';\nimport { PublicFileComponent } from './public-file/public-file.component';\nimport { PublicFileIconComponent } from './public-file/file-icon/public-file-icon.component';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { PageNotFoundComponent } from './page-not-found/page-not-found.component';\nimport { PublicFoldersFooterComponent } from './public-folders-footer/public-folders-footer.component';\nimport { SharedIconsModule } from '../../shared/shared-icons/shared-icons.module';\n\n\nconst ROUTES = [\n\t{\n\t\tpath: ':folderId',\n\t\tcomponent: PublicFoldersComponent,\n\t},\n\n];\n\n@NgModule({\n\tdeclarations: [PublicFoldersComponent, PublicFileComponent, PublicFileIconComponent, PageNotFoundComponent, PublicFoldersFooterComponent],\n\timports: [\n\t\tRouterModule.forChild(ROUTES),\n\t\tTranslateModule,\n\t\tCommonModule,\n\t\tMatDividerModule,\n\t\tMatMenuModule,\n\t\tSharedModule,\n\t\tSharedIconsModule,\n\t],\n\texports: [\n\t\tRouterModule,\n\t],\n})\nexport class PublicFoldersModule {\n}\n"]}